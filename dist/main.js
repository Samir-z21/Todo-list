(()=>{"use strict";var e={341:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),a=n.n(o),r=n(645),c=n.n(r)()(a());c.push([e.id,"/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n}\n\n#projectsContainer {\n    width: 100%;\n    \n}\n\n\n.topProjectItem {\n    display: flex;\n    justify-content: space-between;\n}\n.projectTools {\n    display: flex;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn, .projectRemoveBtn {\n    cursor: pointer;\n    \n}\n\n.openTask, .openProject {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}","",{version:3,sources:["webpack://./dist/style.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;IACI,UAAU;IACV,SAAS;;AAEb;AACA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,aAAa;IACb,yCAAyC;AAC7C;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;AACnB;;AAEA,UAAU;AACV;IACI,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,WAAW;;AAEf;;;AAGA;IACI,aAAa;IACb,8BAA8B;AAClC;AACA;IACI,aAAa;AACjB;;AAEA,mBAAmB;AACnB;IACI,uBAAuB;IACvB,aAAa;IACb,eAAe;IACf,SAAS;IACT,YAAY;AAChB;;AAEA,YAAY;AACZ;IACI,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;AACjB;AACA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,eAAe;;AAEnB;;AAEA;IACI,eAAe;;AAEnB;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,wBAAwB;IACxB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n}\n\n#projectsContainer {\n    width: 100%;\n    \n}\n\n\n.topProjectItem {\n    display: flex;\n    justify-content: space-between;\n}\n.projectTools {\n    display: flex;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn, .projectRemoveBtn {\n    cursor: pointer;\n    \n}\n\n.openTask, .openProject {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}"],sourceRoot:""}]);const s=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(c[l]=!0)}for(var i=0;i<e.length;i++){var d=[].concat(e[i]);o&&c[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},c=[],s=0;s<e.length;s++){var l=e[s],i=o.base?l[0]+o.base:l[0],d=r[i]||0,u="".concat(i," ").concat(d);r[i]=d+1;var p=n(u),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=a(A,o);o.byIndex=s,t.splice(s,0,{identifier:u,updater:m,references:1})}c.push(u)}return c}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var r=o(e=e||[],a=a||{});return function(e){e=e||[];for(var c=0;c<r.length;c++){var s=n(r[c]);t[s].references--}for(var l=o(e,a),i=0;i<r.length;i++){var d=n(r[i]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}r=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,a&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),a=n.n(o),r=n(569),c=n.n(r),s=n(565),l=n.n(s),i=n(216),d=n.n(i),u=n(589),p=n.n(u),A=n(341),m={};m.styleTagTransform=p(),m.setAttributes=l(),m.insert=c().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),t()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const C=[],f=[];class h{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.projectTitle=o}}class y extends h{constructor(e,t,n,o){super(e,t,n),this.color=o}}const v=document.getElementById("projectList"),g=document.getElementById("projectColor"),B=document.getElementById("modifyProjectList");let k=1;function x(e){const t=C.find((t=>t.title===e));return t?t.color:"blue"}function I(e){const t=Array.from(g.getElementsByTagName("option")).find((t=>t.value===e));if(!g.contains(t))return!0;v.childElementCount===k&&(k++,g.removeChild(t))}const b=document.getElementById("tasks-container"),E=document.getElementById("filter");function j(e){e.forEach((e=>{b.appendChild(e)}))}const T=function(){switch(b.querySelectorAll(".taskCard").forEach((e=>{b.removeChild(e)})),E.value){case"oldest":j(V);break;case"newest":j(V.slice().reverse());break;case"dueDate":function e(e,t){return new Date(e.querySelector(".taskDueDate").textContent)-new Date(t.querySelector(".taskDueDate").textContent)}j(V.slice().sort(e));break;case"project":function t(e,t){const n=e.querySelector(".projectName").textContent,o=t.querySelector(".projectName").textContent;return n.localeCompare(o)}j(V.slice().sort(t))}q()},w=document.getElementById("tasks-container"),D=document.getElementById("checkboxArchive"),S=document.getElementById("projectColor"),L=document.getElementById("projectsContainer"),O=document.getElementById("archivedProjectsContainer"),N=[],P=[];function q(){D.checked?N.forEach((e=>{w.appendChild(e)})):N.forEach((e=>{w.appendChild(e),w.removeChild(e)}))}const M=document.getElementById("taskEdit"),R=document.querySelector(".closeModifyTask"),U={},Y={};const V=[],Z=[],$=document.getElementById("projectsContainer");function F(e,t){const n=document.createElement("div");return n.classList.add(e),n.textContent=t,"taskRemoveBtn"===e&&n.addEventListener("click",(e=>{!function(e){const t=n(Z)||n(N);function n(t){return t.find((t=>t.querySelector(".taskRemoveBtn")===e.target))}const o=V.indexOf(t),a=N.indexOf(t);-1!==o&&V.splice(o,1),-1!==a&&N.splice(a,1),T()}(e)})),"projectRemoveBtn"===e&&n.addEventListener("click",(e=>{deleteProject(e)})),n}function H(e,t){const n={};return n[e]=document.createElement("div"),n[e].classList.add(e),n[e].textContent=t,n[e]}function W(e,t){const n=new Date,o=new Date(t.newTaskObj.dueDate);e.textContent=` Due in: ${Math.ceil((o-n)/864e5)} days`,e.style.color=o-n<0?"red":"black"}const G=document.getElementById("taskDialog"),J=document.getElementById("projectDialog"),_=document.getElementById("taskTitle"),X=document.getElementById("projectTitle"),z=document.getElementById("taskBtn"),K=document.getElementById("taskDialog");z.addEventListener("click",(()=>{K.showModal(),_.focus()}));const Q=document.getElementById("projectBtn"),ee=document.getElementById("projectDialog");Q.addEventListener("click",(()=>{ee.showModal(),X.focus()})),document.getElementById("taskConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("taskTitle"),t=document.getElementById("taskDescription"),n=document.getElementById("taskDueDate"),o=document.getElementById("projectList"),a=o.options[o.selectedIndex];if(e.focus(),!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let r=e.value,c=t.value,s=n.value,l=a.value;G.close(),function(e,t,n,o){let a=function(e,t,n,o){const a=new h(e,t,n,o);return f.push(a),{newTaskObj:a,taskArray:f}}(e,t,n,o);const r=H("taskCard");r.style.backgroundColor=x(o);const c=H("topDetailsCard");c.appendChild(F("projectName",a.newTaskObj.projectTitle));const s=document.createElement("div");s.classList.add("dayCount"),W(s,a),c.appendChild(s),r.appendChild(c);const l=H("bottomCard"),i=H("centerInfo");i.appendChild(F("taskTitle",a.newTaskObj.title)),i.appendChild(F("taskDueDate",a.newTaskObj.dueDate));const d=H("rightSide"),u=document.createElement("input");u.type="checkbox",u.classList.add("taskCheckbox"),u.value=null,u.addEventListener("click",(e=>{!function(e){const t=n(V)||n(N);function n(t){return t.find((t=>t.querySelector(".taskCheckbox")===e.target))}const o=N.indexOf(t),a=V.indexOf(t),r=t.getElementsByClassName("projectName")[0].textContent;e.target.checked?(N.includes(t)||N.push(t),-1!==a&&V.splice(a,1),t.getElementsByClassName("taskCheckbox")[0].value=!0,t.style.backgroundColor="rgb(153, 105, 105)"):(V.includes(t)||V.push(t),-1!==o&&N.splice(o,1),t.style.backgroundColor=x(r),x(r)||(t.style.backgroundColor="blue"),t.getElementsByClassName("taskCheckbox")[0].value=null),T(),q()}(e)}));const p=document.createElement("div");p.textContent="↗️",p.classList.add("openTask"),p.addEventListener("click",(e=>{!function(e){M.showModal();const t=document.querySelector("#taskModify"),n=document.getElementById("editTaskTitle"),o=document.getElementById("editTaskDescription"),a=document.getElementById("editTaskDueDate"),r=document.getElementById("modifyProjectList"),c=document.getElementById("modifyCheckbox"),s=document.getElementById("modifyDelete");n.value=e.newTaskObj.title,o.value=e.newTaskObj.description,a.value=e.newTaskObj.dueDate,r.value=e.newTaskObj.projectTitle;const l="clickedObj1",i=f.find((e=>e.title===n.value&&e.description===o.value&&e.dueDate===a.value));Y[l]=i;const d="clickedCard1",u=p(V)||p(N);function p(e){return e.find((e=>e.querySelector(".projectName").textContent===r.value&&e.querySelector(".taskTitle").textContent===n.value&&e.querySelector(".taskDueDate").textContent===a.value))}U[d]=u,U[d].getElementsByClassName("taskCheckbox")[0].value?c.checked=!0:c.checked=!1,R.addEventListener("click",(()=>{M.close()})),s.addEventListener("click",(()=>{const e=V.indexOf(U[d]),t=N.indexOf(U[d]);M.close(),-1!==e&&V.splice(e,1),-1!==t&&N.splice(t,1),T()})),t.addEventListener("click",(()=>{Y[l].title=n.value,Y[l].description=o.value,Y[l].dueDate=a.value,Y[l].projectTitle=r.value,U[d].getElementsByClassName("projectName")[0].textContent=r.value,W(U[d].getElementsByClassName("dayCount")[0],e),U[d].getElementsByClassName("taskTitle")[0].textContent=n.value,U[d].getElementsByClassName("taskDueDate")[0].textContent=a.value,U[d].getElementsByClassName("taskCheckbox")[0].checked=c.checked,U[d].style.backgroundColor=x(Y[l].projectTitle),M.close();const t=V.indexOf(U[d]),s=N.indexOf(U[d]);c.checked?(N.includes(U[d])||N.push(U[d]),-1!==t&&V.splice(t,1),U[d].getElementsByClassName("taskCheckbox")[0].value=!0,U[d].style.backgroundColor="rgb(153, 105, 105)"):(V.includes(U[d])||V.push(U[d]),-1!==s&&N.splice(s,1),U[d].style.backgroundColor=x(U[d].getElementsByClassName("projectName")[0].textContent),U[d].getElementsByClassName("taskCheckbox")[0].value=null),T(),q()}))}(a)})),d.appendChild(u),d.appendChild(F("taskRemoveBtn","🗑️")),d.appendChild(p),l.append(i),l.append(d),r.appendChild(l),V.push(r),T()}(r,c,s,l),e.value="",t.value="",n.value=""}()})),document.getElementById("projectConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("projectTitle"),t=document.getElementById("projectDescription"),n=document.getElementById("projectDueDate"),o=document.getElementById("projectColor");if(!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let a=e.value,r=t.value,c=n.value,s=o.value;C.find((e=>e.title===a))?alert("can't use same project name"):I(s)?alert("Max amount of projects reached"):(J.close(),function(e,t,n,o){let a=function(e,t,n,o){const a=new y(e,t,n,o);return C.push(a),{newProjectObj:a,projectArray:C}}(e,t,n,o);const r=H("projectItem");r.style.backgroundColor=o;const c=H("topProjectItem");c.appendChild(F("projectTitle",a.newProjectObj.title));const s=H("projectTools"),l=H("openProject","↗️");l.addEventListener("click",(e=>{editProject(a)}));const i=document.createElement("input");i.type="checkbox",i.classList.add("projectCheckbox"),i.value=null,i.addEventListener("click",(e=>{!function(e){const t=n(Z)||n(P);function n(t){return t.find((t=>t.querySelector(".projectCheckbox")===e.target))}const o=P.indexOf(t),a=Z.indexOf(t);if(t.getElementsByClassName("projectTitle")[0].textContent,e.target.checked)P.includes(t)||P.push(t),-1!==a&&Z.splice(a,1),L.removeChild(t),O.appendChild(t),t.style.backgroundColor="grey";else{if(Z.length>=10)return void alert("Can't add archived project. Project limit reached");{Z.includes(t)||Z.push(t),-1!==o&&P.splice(o,1);const e=Array.from(S.getElementsByTagName("option"));t.style.backgroundColor=e[0].value,O.removeChild(t),L.appendChild(t)}}}(e)})),s.appendChild(i),s.appendChild(F("projectRemoveBtn","🗑️")),s.appendChild(l),c.appendChild(s),r.appendChild(c),r.appendChild(F("projectDueDate",a.newProjectObj.dueDate)),function(e){const t=document.createElement("option"),n=document.createElement("option");n.value=e,n.text=e,B.appendChild(n),t.value=e,t.text=e,v.appendChild(t)}(e),Z.push(r),$.appendChild(r)}(a,r,c,s),e.value="",t.value="",n.value="")}()})),document.querySelectorAll(".close-btn").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),K.close(),ee.close()}))})),document.getElementById("filter").addEventListener("change",(()=>{T()})),document.getElementById("checkboxArchive").addEventListener("click",(()=>{q()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,