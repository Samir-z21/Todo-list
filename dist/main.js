(()=>{"use strict";var e={341:(e,n,t)=>{t.d(n,{Z:()=>i});var o=t(537),r=t.n(o),a=t(645),c=t.n(a)()(r());c.push([e.id,"/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn {\n    cursor: pointer;\n    border: 1px solid darkred;\n}\n\n.openTask {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}","",{version:3,sources:["webpack://./dist/style.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;IACI,UAAU;IACV,SAAS;;AAEb;AACA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,aAAa;IACb,yCAAyC;AAC7C;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;AACnB;;AAEA,UAAU;AACV;IACI,sBAAsB;IACtB,aAAa;AACjB;;AAEA,mBAAmB;AACnB;IACI,uBAAuB;IACvB,aAAa;IACb,eAAe;IACf,SAAS;IACT,YAAY;AAChB;;AAEA,YAAY;AACZ;IACI,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;AACjB;AACA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,eAAe;;AAEnB;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,wBAAwB;IACxB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn {\n    cursor: pointer;\n    border: 1px solid darkred;\n}\n\n.openTask {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);o&&c[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},c=[],i=0;i<e.length;i++){var s=e[i],d=o.base?s[0]+o.base:s[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var p=t(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var m=r(A,o);o.byIndex=i,n.splice(i,0,{identifier:u,updater:m,references:1})}c.push(u)}return c}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=t(a[c]);n[i].references--}for(var s=o(e,r),d=0;d<a.length;d++){var l=t(a[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=s}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),a=t(569),c=t.n(a),i=t(565),s=t.n(i),d=t(216),l=t.n(d),u=t(589),p=t.n(u),A=t(341),m={};m.styleTagTransform=p(),m.setAttributes=s(),m.insert=c().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),n()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const f=[],C=[];class h{constructor(e,n,t,o){this.title=e,this.description=n,this.dueDate=t,this.projectTitle=o}}class g extends h{constructor(e,n,t,o){super(e,n,t),this.color=o}}const v=document.getElementById("projectList"),y=document.getElementById("projectColor");let B=1;function I(e){const n=f.find((n=>n.title===e));return n?n.color:void 0}function x(e){const n=Array.from(y.getElementsByTagName("option")).find((n=>n.value===e));if(!y.contains(n))return console.log("hey"),!0;v.childElementCount===B&&(B++,y.removeChild(n))}const b=document.getElementById("tasks-container"),k=document.getElementById("filter");function E(e){e.forEach((e=>{b.appendChild(e)}))}const j=function(){switch(b.querySelectorAll(".taskCard").forEach((e=>{b.removeChild(e)})),k.value){case"oldest":E(O);break;case"newest":E(O.slice().reverse());break;case"dueDate":function e(e,n){return new Date(e.querySelector(".taskDueDate").textContent)-new Date(n.querySelector(".taskDueDate").textContent)}E(O.slice().sort(e));break;case"project":function n(e,n){const t=e.querySelector(".projectName").textContent,o=n.querySelector(".projectName").textContent;return t.localeCompare(o)}E(O.slice().sort(n))}S()},w=document.getElementById("tasks-container"),D=document.getElementById("checkboxArchive"),T=[];function S(){D.checked?T.forEach((e=>{w.appendChild(e)})):T.forEach((e=>{w.appendChild(e),w.removeChild(e)}))}const L=document.getElementById("taskDialog"),O=[];const M=document.getElementById("sidebar");function q(e,n){const t=document.createElement("div");return t.classList.add(e),t.textContent=n,"taskRemoveBtn"===e&&t.addEventListener("click",(e=>{!function(e){const n=t(O)||t(T);function t(n){return n.find((n=>n.querySelector(".taskRemoveBtn")===e.target))}const o=O.indexOf(n),r=T.indexOf(n);-1!==o&&O.splice(o,1),-1!==r&&T.splice(r,1),j()}(e)})),"openTask"===e&&t.addEventListener("click",(e=>{L.showModal()})),t}function N(e){const n={};return n[e]=document.createElement("div"),n[e].classList.add(e),n[e]}const R=document.getElementById("taskDialog"),U=document.getElementById("projectDialog"),Y=document.getElementById("taskTitle"),P=document.getElementById("projectTitle"),V=document.getElementById("taskBtn"),Z=document.getElementById("taskDialog");V.addEventListener("click",(()=>{Z.showModal(),Y.focus()}));const $=document.getElementById("projectBtn"),F=document.getElementById("projectDialog");$.addEventListener("click",(()=>{F.showModal(),P.focus()})),document.getElementById("taskConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("taskTitle"),n=document.getElementById("taskDescription"),t=document.getElementById("taskDueDate"),o=document.getElementById("projectList"),r=o.options[o.selectedIndex];if(e.focus(),!e.checkValidity()||!n.checkValidity()||!t.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(n.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let a=e.value,c=n.value,i=t.value,s=r.value;R.close(),function(e,n,t,o){let r=function(e,n,t,o){const r=new h(e,n,t,o);return C.push(r),{newTaskObj:r,taskArray:C}}(e,n,t,o);const a=N("taskCard");a.style.backgroundColor=I(o);const c=N("topDetailsCard");c.appendChild(q("projectName",r.newTaskObj.projectTitle));const i=document.createElement("div"),s=new Date,d=new Date(r.newTaskObj.dueDate);i.textContent=` Due in: ${Math.ceil((d-s)/864e5)} days`,d-s<0&&(i.style.color="red"),c.appendChild(i),a.appendChild(c);const l=N("bottomCard"),u=N("centerInfo");u.appendChild(q("taskTitle",r.newTaskObj.title)),u.appendChild(q("taskDueDate",r.newTaskObj.dueDate));const p=N("rightSide"),A=document.createElement("input");A.type="checkbox",A.classList.add("taskCheckbox"),p.appendChild(A),p.appendChild(q("taskRemoveBtn","🗑️")),p.appendChild(q("openTask","↗️")),l.append(u),l.append(p),a.appendChild(l),O.push(a),A.addEventListener("click",(e=>{!function(e){const n=t(O)||t(T);function t(n){return n.find((n=>n.querySelector(".taskCheckbox")===e.target))}const o=T.indexOf(n),r=O.indexOf(n),a=n.getElementsByClassName("projectName")[0].textContent;e.target.checked?(T.includes(n)||T.push(n),-1!==r&&O.splice(r,1),n.style.backgroundColor="rgb(153, 105, 105)"):(O.includes(n)||O.push(n),-1!==o&&T.splice(o,1),n.style.backgroundColor=I(a),I(a)||(n.style.backgroundColor="blue")),j(),S()}(e)})),j()}(a,c,i,s),e.value="",n.value="",t.value=""}()})),document.getElementById("projectConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("projectTitle"),n=document.getElementById("projectDescription"),t=document.getElementById("projectDueDate"),o=document.getElementById("projectColor");if(!e.checkValidity()||!n.checkValidity()||!t.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(n.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let r=e.value,a=n.value,c=t.value,i=o.value;f.find((e=>e.title===r))?alert("can't use same project name"):x(i)?alert("Max amount of projects reached"):(U.close(),function(e,n,t,o){let r=function(e,n,t,o){const r=new g(e,n,t,o);return f.push(r),{newProjectObj:r,projectArray:f}}(e,n,t,o);const a=N("projectItem");a.style.backgroundColor=o,a.appendChild(q("projectTitle",r.newProjectObj.title)),a.appendChild(q("projectDueDate",r.newProjectObj.dueDate)),function(e){const n=document.createElement("option");n.value=e,n.text=e,v.appendChild(n)}(e),M.appendChild(a)}(r,a,c,i),e.value="",n.value="",t.value="")}()})),document.querySelectorAll(".close-btn").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),Z.close(),F.close()}))})),document.getElementById("filter").addEventListener("change",(()=>{j()})),document.getElementById("checkboxArchive").addEventListener("click",(()=>{S()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,