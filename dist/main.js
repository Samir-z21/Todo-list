(()=>{"use strict";var e={341:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),a=n.n(o),r=n(645),c=n.n(r)()(a());c.push([e.id,"/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn {\n    cursor: pointer;\n    border: 1px solid darkred;\n}\n\n.openTask {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}","",{version:3,sources:["webpack://./dist/style.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;IACI,UAAU;IACV,SAAS;;AAEb;AACA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,aAAa;IACb,yCAAyC;AAC7C;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;AACnB;;AAEA,UAAU;AACV;IACI,sBAAsB;IACtB,aAAa;AACjB;;AAEA,mBAAmB;AACnB;IACI,uBAAuB;IACvB,aAAa;IACb,eAAe;IACf,SAAS;IACT,YAAY;AAChB;;AAEA,YAAY;AACZ;IACI,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;AACjB;AACA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,eAAe;;AAEnB;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,wBAAwB;IACxB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn {\n    cursor: pointer;\n    border: 1px solid darkred;\n}\n\n.openTask {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}"],sourceRoot:""}]);const s=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var s=0;s<this.length;s++){var i=this[s][0];null!=i&&(c[i]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);o&&c[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},c=[],s=0;s<e.length;s++){var i=e[s],l=o.base?i[0]+o.base:i[0],d=r[l]||0,u="".concat(l," ").concat(d);r[l]=d+1;var p=n(u),A={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=a(A,o);o.byIndex=s,t.splice(s,0,{identifier:u,updater:m,references:1})}c.push(u)}return c}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var r=o(e=e||[],a=a||{});return function(e){e=e||[];for(var c=0;c<r.length;c++){var s=n(r[c]);t[s].references--}for(var i=o(e,a),l=0;l<r.length;l++){var d=n(r[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}r=i}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,a&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),a=n.n(o),r=n(569),c=n.n(r),s=n(565),i=n.n(s),l=n(216),d=n.n(l),u=n(589),p=n.n(u),A=n(341),m={};m.styleTagTransform=p(),m.setAttributes=i(),m.insert=c().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),t()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const f=[],C=[];class h{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.projectTitle=o}}class g extends h{constructor(e,t,n,o){super(e,t,n),this.color=o}}const v=document.getElementById("projectList"),y=document.getElementById("projectColor"),B=document.getElementById("modifyProjectList");let k=1;function x(e){const t=f.find((t=>t.title===e));return t?t.color:"blue"}function b(e){const t=Array.from(y.getElementsByTagName("option")).find((t=>t.value===e));if(!y.contains(t))return!0;v.childElementCount===k&&(k++,y.removeChild(t))}const I=document.getElementById("tasks-container"),E=document.getElementById("filter");function j(e){e.forEach((e=>{I.appendChild(e)}))}const T=function(){switch(I.querySelectorAll(".taskCard").forEach((e=>{I.removeChild(e)})),E.value){case"oldest":j(P);break;case"newest":j(P.slice().reverse());break;case"dueDate":function e(e,t){return new Date(e.querySelector(".taskDueDate").textContent)-new Date(t.querySelector(".taskDueDate").textContent)}j(P.slice().sort(e));break;case"project":function t(e,t){const n=e.querySelector(".projectName").textContent,o=t.querySelector(".projectName").textContent;return n.localeCompare(o)}j(P.slice().sort(t))}L()},w=document.getElementById("tasks-container"),D=document.getElementById("checkboxArchive"),S=[];function L(){D.checked?S.forEach((e=>{w.appendChild(e)})):S.forEach((e=>{w.appendChild(e),w.removeChild(e)}))}const O=document.getElementById("taskEdit"),N=document.querySelector(".closeModifyTask"),q={},M={};const P=[];const R=document.getElementById("sidebar");function U(e,t){const n=document.createElement("div");return n.classList.add(e),n.textContent=t,"taskRemoveBtn"===e&&n.addEventListener("click",(e=>{!function(e){const t=n(P)||n(S);function n(t){return t.find((t=>t.querySelector(".taskRemoveBtn")===e.target))}const o=P.indexOf(t),a=S.indexOf(t);-1!==o&&P.splice(o,1),-1!==a&&S.splice(a,1),T()}(e)})),n}function Y(e){const t={};return t[e]=document.createElement("div"),t[e].classList.add(e),t[e]}function V(e,t){const n=new Date,o=new Date(t.newTaskObj.dueDate);e.textContent=` Due in: ${Math.ceil((o-n)/864e5)} days`,e.style.color=o-n<0?"red":"black"}const Z=document.getElementById("taskDialog"),$=document.getElementById("projectDialog"),F=document.getElementById("taskTitle"),H=document.getElementById("projectTitle"),J=document.getElementById("taskBtn"),W=document.getElementById("taskDialog");J.addEventListener("click",(()=>{W.showModal(),F.focus()}));const _=document.getElementById("projectBtn"),G=document.getElementById("projectDialog");_.addEventListener("click",(()=>{G.showModal(),H.focus()})),document.getElementById("taskConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("taskTitle"),t=document.getElementById("taskDescription"),n=document.getElementById("taskDueDate"),o=document.getElementById("projectList"),a=o.options[o.selectedIndex];if(e.focus(),!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let r=e.value,c=t.value,s=n.value,i=a.value;Z.close(),function(e,t,n,o){let a=function(e,t,n,o){const a=new h(e,t,n,o);return C.push(a),{newTaskObj:a,taskArray:C}}(e,t,n,o);const r=Y("taskCard");r.style.backgroundColor=x(o);const c=Y("topDetailsCard");c.appendChild(U("projectName",a.newTaskObj.projectTitle));const s=document.createElement("div");s.classList.add("dayCount"),V(s,a),c.appendChild(s),r.appendChild(c);const i=Y("bottomCard"),l=Y("centerInfo");l.appendChild(U("taskTitle",a.newTaskObj.title)),l.appendChild(U("taskDueDate",a.newTaskObj.dueDate));const d=Y("rightSide"),u=document.createElement("input");u.type="checkbox",u.classList.add("taskCheckbox"),u.value=null,u.addEventListener("click",(e=>{!function(e){const t=n(P)||n(S);function n(t){return t.find((t=>t.querySelector(".taskCheckbox")===e.target))}const o=S.indexOf(t),a=P.indexOf(t),r=t.getElementsByClassName("projectName")[0].textContent;e.target.checked?(S.includes(t)||S.push(t),-1!==a&&P.splice(a,1),t.getElementsByClassName("taskCheckbox")[0].value=!0,t.style.backgroundColor="rgb(153, 105, 105)"):(P.includes(t)||P.push(t),-1!==o&&S.splice(o,1),t.style.backgroundColor=x(r),x(r)||(t.style.backgroundColor="blue"),t.getElementsByClassName("taskCheckbox")[0].value=null),T(),L()}(e)}));const p=document.createElement("div");p.textContent="↗️",p.classList.add("openTask"),p.addEventListener("click",(e=>{!function(e){O.showModal();const t=document.querySelector("#taskModify"),n=document.getElementById("editTaskTitle"),o=document.getElementById("editTaskDescription"),a=document.getElementById("editTaskDueDate"),r=document.getElementById("modifyProjectList"),c=document.getElementById("modifyCheckbox"),s=document.getElementById("modifyDelete");n.value=e.newTaskObj.title,o.value=e.newTaskObj.description,a.value=e.newTaskObj.dueDate,r.value=e.newTaskObj.projectTitle;const i="clickedObj1",l=C.find((e=>e.title===n.value&&e.description===o.value&&e.dueDate===a.value));M[i]=l;const d="clickedCard1",u=p(P)||p(S);function p(e){return e.find((e=>e.querySelector(".projectName").textContent===r.value&&e.querySelector(".taskTitle").textContent===n.value&&e.querySelector(".taskDueDate").textContent===a.value))}q[d]=u,q[d].getElementsByClassName("taskCheckbox")[0].value?c.checked=!0:c.checked=!1,N.addEventListener("click",(()=>{O.close()})),s.addEventListener("click",(()=>{const e=P.indexOf(q[d]),t=S.indexOf(q[d]);O.close(),-1!==e&&P.splice(e,1),-1!==t&&S.splice(t,1),T()})),t.addEventListener("click",(()=>{M[i].title=n.value,M[i].description=o.value,M[i].dueDate=a.value,M[i].projectTitle=r.value,q[d].getElementsByClassName("projectName")[0].textContent=r.value,V(q[d].getElementsByClassName("dayCount")[0],e),q[d].getElementsByClassName("taskTitle")[0].textContent=n.value,q[d].getElementsByClassName("taskDueDate")[0].textContent=a.value,q[d].getElementsByClassName("taskCheckbox")[0].checked=c.checked,q[d].style.backgroundColor=x(M[i].projectTitle),O.close();const t=P.indexOf(q[d]),s=S.indexOf(q[d]);c.checked?(S.includes(q[d])||S.push(q[d]),-1!==t&&P.splice(t,1),q[d].getElementsByClassName("taskCheckbox")[0].value=!0,q[d].style.backgroundColor="rgb(153, 105, 105)"):(P.includes(q[d])||P.push(q[d]),-1!==s&&S.splice(s,1),q[d].style.backgroundColor=x(q[d].getElementsByClassName("projectName")[0].textContent),q[d].getElementsByClassName("taskCheckbox")[0].value=null),T(),L()}))}(a)})),d.appendChild(u),d.appendChild(U("taskRemoveBtn","🗑️")),d.appendChild(p),i.append(l),i.append(d),r.appendChild(i),P.push(r),T()}(r,c,s,i),e.value="",t.value="",n.value=""}()})),document.getElementById("projectConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("projectTitle"),t=document.getElementById("projectDescription"),n=document.getElementById("projectDueDate"),o=document.getElementById("projectColor");if(!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let a=e.value,r=t.value,c=n.value,s=o.value;f.find((e=>e.title===a))?alert("can't use same project name"):b(s)?alert("Max amount of projects reached"):($.close(),function(e,t,n,o){let a=function(e,t,n,o){const a=new g(e,t,n,o);return f.push(a),{newProjectObj:a,projectArray:f}}(e,t,n,o);const r=Y("projectItem");r.style.backgroundColor=o,r.appendChild(U("projectTitle",a.newProjectObj.title)),r.appendChild(U("projectDueDate",a.newProjectObj.dueDate)),function(e){const t=document.createElement("option"),n=document.createElement("option");n.value=e,n.text=e,B.appendChild(n),t.value=e,t.text=e,v.appendChild(t)}(e),R.appendChild(r)}(a,r,c,s),e.value="",t.value="",n.value="")}()})),document.querySelectorAll(".close-btn").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),W.close(),G.close()}))})),document.getElementById("filter").addEventListener("change",(()=>{T()})),document.getElementById("checkboxArchive").addEventListener("click",(()=>{L()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,