(()=>{"use strict";var e={341:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(537),r=n.n(o),a=n(645),c=n.n(a)()(r());c.push([e.id,"/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn {\n    cursor: pointer;\n    border: 1px solid darkred;\n}\n\n.openTask {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}","",{version:3,sources:["webpack://./dist/style.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;IACI,UAAU;IACV,SAAS;;AAEb;AACA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,aAAa;IACb,yCAAyC;AAC7C;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;AACnB;;AAEA,UAAU;AACV;IACI,sBAAsB;IACtB,aAAa;AACjB;;AAEA,mBAAmB;AACnB;IACI,uBAAuB;IACvB,aAAa;IACb,eAAe;IACf,SAAS;IACT,YAAY;AAChB;;AAEA,YAAY;AACZ;IACI,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;AACjB;AACA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,eAAe;;AAEnB;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,wBAAwB;IACxB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn {\n    cursor: pointer;\n    border: 1px solid darkred;\n}\n\n.openTask {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);o&&c[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},c=[],i=0;i<e.length;i++){var s=e[i],d=o.base?s[0]+o.base:s[0],l=a[d]||0,u="".concat(d," ").concat(l);a[d]=l+1;var p=n(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=r(A,o);o.byIndex=i,t.splice(i,0,{identifier:u,updater:m,references:1})}c.push(u)}return c}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var s=o(e,r),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0,(()=>{var e={};n.r(e),n.d(e,{nw:()=>M,_5:()=>N,ir:()=>L});var t=n(379),o=n.n(t),r=n(795),a=n.n(r),c=n(569),i=n.n(c),s=n(565),d=n.n(s),l=n(216),u=n.n(l),p=n(589),A=n.n(p),m=n(341),f={};f.styleTagTransform=A(),f.setAttributes=d(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),o()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;const C=[],v=[];class y{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.projectTitle=o}}class g extends y{constructor(e,t,n,o){super(e,t,n),this.color=o}}const h=document.getElementById("projectList"),B=document.getElementById("projectColor"),x=document.getElementById("modifyProjectList");let I=1;function b(e){const t=C.find((t=>t.title===e));return t?t.color:"blue"}function k(e){const t=Array.from(B.getElementsByTagName("option")).find((t=>t.value===e));if(!B.contains(t))return!0;h.childElementCount===I&&(I++,B.removeChild(t))}const E=document.getElementById("tasks-container"),j=document.getElementById("filter");function T(e){e.forEach((e=>{E.appendChild(e)}))}const w=function(){switch(E.querySelectorAll(".taskCard").forEach((e=>{E.removeChild(e)})),j.value){case"oldest":T(Y);break;case"newest":T(Y.slice().reverse());break;case"dueDate":function e(e,t){return new Date(e.querySelector(".taskDueDate").textContent)-new Date(t.querySelector(".taskDueDate").textContent)}T(Y.slice().sort(e));break;case"project":function t(e,t){const n=e.querySelector(".projectName").textContent,o=t.querySelector(".projectName").textContent;return n.localeCompare(o)}T(Y.slice().sort(t))}M()},D=document.getElementById("tasks-container"),S=document.getElementById("checkboxArchive"),O=[];function L(e){const t=n(Y)||n(O);function n(t){return t.find((t=>t.querySelector(".taskCheckbox")===e.target))}const o=O.indexOf(t),r=Y.indexOf(t),a=t.getElementsByClassName("projectName")[0].textContent;e.target.checked?(O.includes(t)||O.push(t),-1!==r&&Y.splice(r,1),t.style.backgroundColor="rgb(153, 105, 105)"):(Y.includes(t)||Y.push(t),-1!==o&&O.splice(o,1),t.style.backgroundColor=b(a),b(a)||(t.style.backgroundColor="blue")),w(),M()}function M(){S.checked?O.forEach((e=>{D.appendChild(e)})):O.forEach((e=>{D.appendChild(e),D.removeChild(e)}))}function N(e){const t=n(Y)||n(O);function n(t){return t.find((t=>t.querySelector(".taskRemoveBtn")===e.target))}const o=Y.indexOf(t),r=O.indexOf(t);-1!==o&&Y.splice(o,1),-1!==r&&O.splice(r,1),w()}const q=document.getElementById("taskEdit"),P=document.querySelector(".closeModifyTask"),R={},U={};const Y=[];const V=document.getElementById("sidebar");function Z(e,t){const n=document.createElement("div");return n.classList.add(e),n.textContent=t,"taskRemoveBtn"===e&&n.addEventListener("click",(e=>{N(e)})),n}function $(e){const t={};return t[e]=document.createElement("div"),t[e].classList.add(e),t[e]}const _=document.getElementById("taskDialog"),F=document.getElementById("projectDialog"),H=document.getElementById("taskTitle"),J=document.getElementById("projectTitle"),W=document.getElementById("taskBtn"),G=document.getElementById("taskDialog");W.addEventListener("click",(()=>{G.showModal(),H.focus()}));const X=document.getElementById("projectBtn"),z=document.getElementById("projectDialog");X.addEventListener("click",(()=>{z.showModal(),J.focus()})),document.getElementById("taskConfirm").addEventListener("click",(t=>{t.preventDefault(),function(){const t=document.getElementById("taskTitle"),n=document.getElementById("taskDescription"),o=document.getElementById("taskDueDate"),r=document.getElementById("projectList"),a=r.options[r.selectedIndex];if(t.focus(),!t.checkValidity()||!n.checkValidity()||!o.checkValidity()||/^\s*$/.test(t.value)||/^\s*$/.test(n.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let c=t.value,i=n.value,s=o.value,d=a.value;_.close(),function(t,n,o,r){let a=function(e,t,n,o){const r=new y(e,t,n,o);return v.push(r),{newTaskObj:r,taskArray:v}}(t,n,o,r);const c=$("taskCard");c.style.backgroundColor=b(r);const i=$("topDetailsCard");i.appendChild(Z("projectName",a.newTaskObj.projectTitle));const s=document.createElement("div");s.classList.add("dayCount"),function(e,t){const n=new Date,o=new Date(t.newTaskObj.dueDate);e.textContent=` Due in: ${Math.ceil((o-n)/864e5)} days`,o-n<0&&(e.style.color="red")}(s,a),i.appendChild(s),c.appendChild(i);const d=$("bottomCard"),l=$("centerInfo");l.appendChild(Z("taskTitle",a.newTaskObj.title)),l.appendChild(Z("taskDueDate",a.newTaskObj.dueDate));const u=$("rightSide"),p=document.createElement("input");p.type="checkbox",p.classList.add("taskCheckbox");const A=document.createElement("div");A.textContent="↗️",A.classList.add("openTask"),A.addEventListener("click",(t=>{!function(t,n,o){q.showModal();const r=document.querySelector("#taskModify"),a=document.getElementById("editTaskTitle"),c=document.getElementById("editTaskDescription"),i=document.getElementById("editTaskDueDate"),s=document.getElementById("modifyProjectList");a.value=t.newTaskObj.title,c.value=t.newTaskObj.description,i.value=t.newTaskObj.dueDate,s.value=t.newTaskObj.projectTitle;const d="clickedObj1",l=v.find((e=>e.title===a.value&&e.description===c.value&&e.dueDate===i.value));U[d]=l;const u="clickedCard1",p=A(Y)||A(e.default);function A(e){return e.find((e=>e.querySelector(".projectName").textContent===s.value&&e.querySelector(".taskTitle").textContent===a.value&&e.querySelector(".taskDueDate").textContent===i.value))}R[u]=p,P.addEventListener("click",(e=>{q.close()})),r.addEventListener("click",(()=>{U[d].title=a.value,U[d].description=c.value,U[d].dueDate=i.value,U[d].projectTitle=s.value,-1!==Y.indexOf(R[u])&&(R[u].getElementsByClassName("projectName")[0].textContent=s.value,function(e,t){const n=new Date,o=new Date(t.newTaskObj.dueDate);e.textContent=` Due in: ${Math.ceil((o-n)/864e5)} days`,e.style.color=o-n<0?"red":"black"}(R[u].getElementsByClassName("dayCount")[0],t),R[u].getElementsByClassName("taskTitle")[0].textContent=a.value,R[u].getElementsByClassName("taskDueDate")[0].textContent=i.value,R[u].style.backgroundColor=b(U[d].projectTitle)),q.close()}))}(a)})),u.appendChild(p),u.appendChild(Z("taskRemoveBtn","🗑️")),u.appendChild(A),d.append(l),d.append(u),c.appendChild(d),Y.push(c),p.addEventListener("click",(e=>{L(e)})),w()}(c,i,s,d),t.value="",n.value="",o.value=""}()})),document.getElementById("projectConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("projectTitle"),t=document.getElementById("projectDescription"),n=document.getElementById("projectDueDate"),o=document.getElementById("projectColor");if(!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let r=e.value,a=t.value,c=n.value,i=o.value;C.find((e=>e.title===r))?alert("can't use same project name"):k(i)?alert("Max amount of projects reached"):(F.close(),function(e,t,n,o){let r=function(e,t,n,o){const r=new g(e,t,n,o);return C.push(r),{newProjectObj:r,projectArray:C}}(e,t,n,o);const a=$("projectItem");a.style.backgroundColor=o,a.appendChild(Z("projectTitle",r.newProjectObj.title)),a.appendChild(Z("projectDueDate",r.newProjectObj.dueDate)),function(e){const t=document.createElement("option"),n=document.createElement("option");n.value=e,n.text=e,x.appendChild(n),t.value=e,t.text=e,h.appendChild(t)}(e),V.appendChild(a)}(r,a,c,i),e.value="",t.value="",n.value="")}()})),document.querySelectorAll(".close-btn").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),G.close(),z.close()}))})),document.getElementById("filter").addEventListener("change",(()=>{w()})),document.getElementById("checkboxArchive").addEventListener("click",(()=>{M()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,