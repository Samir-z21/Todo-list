(()=>{"use strict";var e={341:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(537),c=n.n(o),r=n(645),l=n.n(r)()(c());l.push([e.id,"/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n\n#projectsContainer {\n    width: 100%;\n    \n}\n\n\n.topProjectItem {\n    display: flex;\n    justify-content: space-between;\n}\n.projectTools {\n    display: flex;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn, .projectRemoveBtn {\n    cursor: pointer;\n    \n}\n\n.openTask, .openProject {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}","",{version:3,sources:["webpack://./dist/style.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;IACI,UAAU;IACV,SAAS;;AAEb;AACA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,aAAa;IACb,yCAAyC;AAC7C;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;AACnB;;AAEA,UAAU;AACV;IACI,sBAAsB;IACtB,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,8BAA8B;AAClC;;;AAGA;IACI,WAAW;;AAEf;;;AAGA;IACI,aAAa;IACb,8BAA8B;AAClC;AACA;IACI,aAAa;AACjB;;AAEA,mBAAmB;AACnB;IACI,uBAAuB;IACvB,aAAa;IACb,eAAe;IACf,SAAS;IACT,YAAY;AAChB;;AAEA,YAAY;AACZ;IACI,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;AACjB;AACA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,eAAe;;AAEnB;;AAEA;IACI,eAAe;;AAEnB;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,wBAAwB;IACxB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n\n#projectsContainer {\n    width: 100%;\n    \n}\n\n\n.topProjectItem {\n    display: flex;\n    justify-content: space-between;\n}\n.projectTools {\n    display: flex;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn, .projectRemoveBtn {\n    cursor: pointer;\n    \n}\n\n.openTask, .openProject {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}"],sourceRoot:""}]);const a=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,c,r){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(o)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(l[i]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);o&&l[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),c&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=c):d[4]="".concat(c)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(c," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},l=[],a=0;a<e.length;a++){var i=e[a],s=o.base?i[0]+o.base:i[0],d=r[s]||0,u="".concat(s," ").concat(d);r[s]=d+1;var p=n(u),m={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=c(m,o);o.byIndex=a,t.splice(a,0,{identifier:u,updater:A,references:1})}l.push(u)}return l}function c(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,c){var r=o(e=e||[],c=c||{});return function(e){e=e||[];for(var l=0;l<r.length;l++){var a=n(r[l]);t[a].references--}for(var i=o(e,c),s=0;s<r.length;s++){var d=n(r[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}r=i}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var c=void 0!==n.layer;c&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,c&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var c=t[o];if(void 0!==c)return c.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),c=n.n(o),r=n(569),l=n.n(r),a=n(565),i=n.n(a),s=n(216),d=n.n(s),u=n(589),p=n.n(u),m=n(341),A={};A.styleTagTransform=p(),A.setAttributes=i(),A.insert=l().bind(null,"head"),A.domAPI=c(),A.insertStyleElement=d(),t()(m.Z,A),m.Z&&m.Z.locals&&m.Z.locals;const C=[],f=[];class y{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.projectTitle=o}}class g extends y{constructor(e,t,n,o){super(e,t,n),this.color=o}}const h=document.getElementById("tasks-container"),v=document.getElementById("filter");function k(e){e.forEach((e=>{h.appendChild(e)}))}const x=function(){switch(h.querySelectorAll(".taskCard").forEach((e=>{h.removeChild(e)})),v.value){case"oldest":k(ne);break;case"newest":k(ne.slice().reverse());break;case"dueDate":function e(e,t){return new Date(e.querySelector(".taskDueDate").textContent)-new Date(t.querySelector(".taskDueDate").textContent)}k(ne.slice().sort(e));break;case"project":function t(e,t){const n=e.querySelector(".projectName").textContent,o=t.querySelector(".projectName").textContent;return n.localeCompare(o)}k(ne.slice().sort(t))}F()},j=document.getElementById("taskEdit"),B=document.querySelector(".closeModifyTask"),b={},E={},I=document.getElementById("projectEdit"),T=document.querySelector(".closeModifyProject"),D=document.getElementById("modifyProjectColorList"),w={},O={};let N=1;function S(e,t){const n=Array.from(projectColor.getElementsByTagName("option"));n.forEach((e=>{Array.from(D.getElementsByTagName("option")).some((t=>t.value===e.value))||D.appendChild(e.cloneNode(!0))}));const o=C.map((e=>e.color)),c=Array.from(D.getElementsByTagName("option"));console.log(n),console.log(o),o.forEach((e=>{c.filter((t=>t.value===e)).forEach((e=>{D.removeChild(e)}))})),"↗️"===t.target.textContent&&(Array.from(D.getElementsByTagName("option")).some((t=>t.value===e.value))||D.appendChild(e))}const P=document.getElementById("tasks-container"),L=document.getElementById("checkboxArchive"),q=document.getElementById("projectColor"),M=document.getElementById("projectsContainer"),R=document.getElementById("archivedProjectsContainer"),U=[],Y=[],V=[];let Z=[],$=[];function F(){L.checked?U.forEach((e=>{P.appendChild(e)})):U.forEach((e=>{P.appendChild(e),P.removeChild(e)}))}function H(e,t,n,o){let c=r(oe)||r(Y);function r(t){return t.find((t=>t.querySelector(".projectTitle").textContent===e.newProjectObj.title&&t.querySelector(".projectDueDate").textContent===e.newProjectObj.dueDate))}function l(e){return e.find((e=>e.querySelector(".projectTitle").textContent===n.value&&e.querySelector(".projectDueDate").textContent===o.value))}c||(c=l(oe)||l(Y));const a=c.getElementsByClassName("projectTitle")[0].textContent,i=c.getElementsByClassName("projectDueDate")[0].textContent,s=(Array.from(q.getElementsByTagName("option")),d(C)||d(V));function d(e){return e.find((e=>e.title===a&&e.dueDate===i))}console.log(V),console.log(s);const u=Y.indexOf(c),p=V.indexOf(s),m=oe.indexOf(c),A=C.indexOf(s);if(console.log(p),-1!==u&&Y.splice(u,1),-1!==p&&(V.splice(p,1),console.log("hey")),console.log(V),-1!==m&&oe.splice(m,1),-1!==A&&C.splice(A,1),c.parentNode===M?M.removeChild(c):R.removeChild(c),!c.querySelector(".projectCheckbox").checked){const t=document.createElement("option");t.value=e.newProjectObj.color,t.style.backgroundColor=e.newProjectObj.color,q.appendChild(t)}te(a);const f=document.createElement("option");f.value=e.newProjectObj.color,f.style.backgroundColor=e.newProjectObj.color,S(f,t)}function W(e){return $=V.map((e=>e.title)),console.log($),console.log(V),console.log(e),$.includes(e.title)}const G=document.getElementById("projectList"),J=document.getElementById("projectColor"),_=document.getElementById("modifyProjectList"),X=(document.getElementById("projectsContainer"),document.getElementById("checkboxArchive"));let z=[],K=[];const Q=document.getElementById("tasks-container");function ee(e){const t=C.find((t=>t.title===e));return t?t.color:"blue"}function te(e,t,n){const o=ne.filter((t=>t.querySelector(".projectName").textContent===e)),c=U.filter((t=>t.querySelector(".projectName").textContent===e));z=o.concat(c);for(const e of ne){const t=o.indexOf(e);-1!==t&&ne.splice(t,1)}for(const e of U){const t=c.indexOf(e);-1!==t&&U.splice(t,1)}K=f.filter((t=>t.projectTitle.includes(e)));for(const e of f){const t=K.indexOf(e);-1!==t&&f.splice(t,1)}o.forEach((e=>{Q.removeChild(e)})),X.checked&&c.forEach((e=>{Q.removeChild(e)}));const r=Array.from(G.getElementsByTagName("option")),l=Array.from(_.getElementsByTagName("option"));console.log("hey");const a=r.find((t=>t.value===e)),i=l.find((t=>t.value===e));a&&G.removeChild(a),i&&_.removeChild(i)}const ne=[],oe=[],ce=document.getElementById("projectsContainer");function re(e,t,n,o,c){let r=function(e,t,n,o){const c=new g(e,t,n,o);return C.push(c),{newProjectObj:c,projectArray:C}}(e,t,n,o);const l=ae("projectItem");l.style.backgroundColor=o;const a=ae("topProjectItem");a.appendChild(le("projectTitle",r.newProjectObj.title));const i=ae("projectTools"),s=ae("openProject","↗️");s.addEventListener("click",(e=>{!function(e,t){I.showModal();const n=document.getElementById("editProjectTitle"),o=document.getElementById("editProjectDescription"),c=document.getElementById("editProjectDueDate"),r=document.getElementById("modifyProjectCheckbox"),l=document.getElementById("modifyProjectDelete"),a=document.querySelector("#taskModify"),i=document.getElementById("modifyProjectList");document.getElementById("projectColor"),n.value=e.newProjectObj.title,o.value=e.newProjectObj.description,c.value=e.newProjectObj.dueDate;const s=document.createElement("option");s.value=e.newProjectObj.color,s.style.backgroundColor=e.newProjectObj.color,S(s,t);const d=`clickedObj${N}`,u=C.find((e=>e.title===n.value&&e.description===o.value&&c.value===e.dueDate&&s.value===e.color));O[d]=u;const p=`clickedModifyProject${N}`,m=A(oe)||A(Y);function A(e){return e.find((e=>e.querySelector(".projectTitle").textContent===n.value&&e.querySelector(".projectDueDate").textContent===c.value))}w[p]=m,w[p].getElementsByClassName("projectCheckbox")[0].checked?r.checked=!0:r.checked=!1,T.addEventListener("click",(()=>{I.close()})),l.addEventListener("click",(()=>{I.close(),H(e,t,n,c)})),a.addEventListener("click",(()=>{E[clickedObj].title=editTaskTitle.value,E[clickedObj].description=editTaskDescription.value,E[clickedObj].dueDate=editTaskDueDate.value,E[clickedObj].projectTitle=i.value,b[clickedCard].getElementsByClassName("projectName")[0].textContent=i.value,ie(b[clickedCard].getElementsByClassName("dayCount")[0],accessTask),b[clickedCard].getElementsByClassName("taskTitle")[0].textContent=editTaskTitle.value,b[clickedCard].getElementsByClassName("taskDueDate")[0].textContent=editTaskDueDate.value,b[clickedCard].getElementsByClassName("taskCheckbox")[0].checked=modifyCheckbox.checked,b[clickedCard].style.backgroundColor=ee(E[clickedObj].projectTitle),j.close();const e=ne.indexOf(b[clickedCard]),t=U.indexOf(b[clickedCard]);modifyCheckbox.checked?(U.includes(b[clickedCard])||U.push(b[clickedCard]),-1!==e&&ne.splice(e,1),b[clickedCard].getElementsByClassName("taskCheckbox")[0].value=!0,b[clickedCard].style.backgroundColor="rgb(153, 105, 105)"):(ne.includes(b[clickedCard])||ne.push(b[clickedCard]),-1!==t&&U.splice(t,1),b[clickedCard].style.backgroundColor=ee(b[clickedCard].getElementsByClassName("projectName")[0].textContent),b[clickedCard].getElementsByClassName("taskCheckbox")[0].value=null),x(),F()}))}(r,e)}));const d=document.createElement("input");d.type="checkbox",d.classList.add("projectCheckbox"),d.value=null,d.addEventListener("click",(e=>{!function(e,t){const n=o(oe)||o(Y);function o(e){return e.find((e=>e.querySelector(".projectTitle").textContent===t.newProjectObj.title&&e.querySelector(".projectDueDate").textContent===t.newProjectObj.dueDate))}const c=n.getElementsByClassName("projectTitle")[0].textContent,r=Array.from(q.getElementsByTagName("option")),l=a(C)||a(V);function a(e){return e.find((e=>e.title===c))}if(console.log(l),e.target.checked){if(W(l))return console.log(W(l)),e.preventDefault(),n.querySelector(".projectCheckbox").checked=!1,void alert("Can't add project to archived. This project name is already in use");console.log(W(l));const o=oe.indexOf(n),r=C.indexOf(l);Y.includes(n)||Y.push(n),V.includes(l)||V.push(l),-1!==o&&oe.splice(o,1),-1!==r&&C.splice(r,1),M.removeChild(n),R.appendChild(n);const a=document.createElement("option");a.value=t.newProjectObj.color,a.style.backgroundColor=t.newProjectObj.color,q.appendChild(a),n.style.backgroundColor="grey",te(c)}else{const o=Y.indexOf(n),a=V.indexOf(l);if(oe.length>=10)return e.preventDefault(),n.querySelector(".projectCheckbox").checked=!0,void alert("Can't add archived project. Project limit reached");if(function(e){return Z=C.map((e=>e.title)),console.log(Z),console.log(C),console.log(e),Z.includes(e.title)}(l))return e.preventDefault(),n.querySelector(".projectCheckbox").checked=!0,void alert("Can't add archived project. This project name is already in use");{-1!==o&&Y.splice(o,1),-1!==a&&V.splice(a,1),oe.includes(n)||oe.push(n),C.includes(l)||C.push(l);const e=r[0].value;q.removeChild(r[0]),n.style.backgroundColor=e,t.newProjectObj.color=e,l.color=e,R.removeChild(n),M.appendChild(n),function(e,t){const n=z.filter((t=>t.querySelector(".projectName").textContent===e)),o=n.filter((e=>0==e.querySelector(".taskCheckbox").value)),c=n.filter((e=>"true"===e.querySelector(".taskCheckbox").value));o.forEach((e=>{ne.includes(e)||ne.push(e)})),c.forEach((e=>{U.includes(e)||U.push(e)})),K.filter((t=>t.projectTitle===e)).forEach((e=>{f.includes(e)||f.push(e)})),o.forEach((e=>{Q.appendChild(e),e.style.backgroundColor=t})),c.forEach((e=>{X.checked&&(Q.appendChild(e),e.style.backgroundColor="rgb(153, 105, 105)")}));const r=Array.from(G.getElementsByTagName("option")),l=Array.from(_.getElementsByTagName("option")),a=document.createElement("option");a.value=e,a.text=e;const i=document.createElement("option");i.value=e,i.text=e,l.includes(a)||_.appendChild(a),r.includes(i)||G.appendChild(i)}(c,e)}}const i=document.createElement("option");i.value=t.newProjectObj.color,i.style.backgroundColor=t.newProjectObj.color,S(i,e)}(e,r)}));const u=document.createElement("div");u.classList.add("projectRemoveBtn"),u.textContent="🗑️",u.addEventListener("click",(e=>{H(r,e)})),i.appendChild(d),i.appendChild(u),i.appendChild(s),a.appendChild(i),l.appendChild(a),l.appendChild(le("projectDueDate",r.newProjectObj.dueDate)),function(e){const t=document.createElement("option"),n=document.createElement("option");n.value=e,n.text=e,_.appendChild(n),t.value=e,t.text=e,G.appendChild(t)}(e),oe.push(l),ce.appendChild(l);const p=document.createElement("option");p.value=r.newProjectObj.color,p.style.backgroundColor=r.newProjectObj.color,S(p,c)}function le(e,t){const n=document.createElement("div");return n.classList.add(e),n.textContent=t,"taskRemoveBtn"===e&&n.addEventListener("click",(e=>{!function(e){const t=n(ne)||n(U);function n(t){return t.find((t=>t.querySelector(".taskRemoveBtn")===e.target))}const o=ne.indexOf(t),c=U.indexOf(t);-1!==o&&ne.splice(o,1),-1!==c&&U.splice(c,1),x()}(e)})),n}function ae(e,t){const n={};return n[e]=document.createElement("div"),n[e].classList.add(e),n[e].textContent=t,n[e]}function ie(e,t){const n=new Date,o=new Date(t.newTaskObj.dueDate);e.textContent=` Due in: ${Math.ceil((o-n)/864e5)} days`,e.style.color=o-n<0?"red":"black"}const se=document.getElementById("taskDialog"),de=document.getElementById("projectDialog");function ue(){const e=document.getElementById("projectTitle"),t=document.getElementById("projectDescription"),n=document.getElementById("projectDueDate"),o=document.getElementById("projectColor");if(!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");const c=C.find((t=>t.title===e.value));console.log(C);let r=e.value,l=t.value,a=n.value,i=o.value;if(c)return void alert("can't use same project name");if(function(e){const t=Array.from(J.getElementsByTagName("option")).find((t=>t.value===e));if(!J.contains(t))return!0}(i))return void alert("Max amount of projects reached");de.close();const s=Array.from(o.getElementsByTagName("option")).find((e=>e.value===i));o.removeChild(s),re(r,l,a,i,event),e.value="",t.value="",n.value=""}document.getElementById("projectColor");const pe=document.getElementById("taskTitle"),me=document.getElementById("projectTitle"),Ae=document.getElementById("taskBtn"),Ce=document.getElementById("taskDialog");Ae.addEventListener("click",(()=>{Ce.showModal(),pe.focus()}));const fe=document.getElementById("projectBtn"),ye=document.getElementById("projectDialog");fe.addEventListener("click",(()=>{ye.showModal(),me.focus()})),document.getElementById("taskConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("taskTitle"),t=document.getElementById("taskDescription"),n=document.getElementById("taskDueDate"),o=document.getElementById("projectList"),c=o.options[o.selectedIndex];if(e.focus(),!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let r=e.value,l=t.value,a=n.value,i=c.value;se.close(),function(e,t,n,o){let c=function(e,t,n,o){const c=new y(e,t,n,o);return f.push(c),{newTaskObj:c,taskArray:f}}(e,t,n,o);const r=ae("taskCard");r.style.backgroundColor=ee(o);const l=ae("topDetailsCard");l.appendChild(le("projectName",c.newTaskObj.projectTitle));const a=document.createElement("div");a.classList.add("dayCount"),ie(a,c),l.appendChild(a),r.appendChild(l);const i=ae("bottomCard"),s=ae("centerInfo");s.appendChild(le("taskTitle",c.newTaskObj.title)),s.appendChild(le("taskDueDate",c.newTaskObj.dueDate));const d=ae("rightSide"),u=document.createElement("input");u.type="checkbox",u.classList.add("taskCheckbox"),u.value=null,u.addEventListener("click",(e=>{!function(e){const t=n(ne)||n(U);function n(t){return t.find((t=>t.querySelector(".taskCheckbox")===e.target))}const o=U.indexOf(t),c=ne.indexOf(t);console.log(t);const r=t.getElementsByClassName("projectName")[0].textContent;e.target.checked?(U.includes(t)||U.push(t),-1!==c&&ne.splice(c,1),t.getElementsByClassName("taskCheckbox")[0].value=!0,t.style.backgroundColor="rgb(153, 105, 105)"):(ne.includes(t)||ne.push(t),-1!==o&&U.splice(o,1),t.style.backgroundColor=ee(r),ee(r)||(t.style.backgroundColor="blue"),t.getElementsByClassName("taskCheckbox")[0].value=null),x(),F()}(e)}));const p=document.createElement("div");p.textContent="↗️",p.classList.add("openTask"),p.addEventListener("click",(e=>{!function(e){j.showModal();const t=document.querySelector("#taskModify"),n=document.getElementById("editTaskTitle"),o=document.getElementById("editTaskDescription"),c=document.getElementById("editTaskDueDate"),r=document.getElementById("modifyProjectList"),l=document.getElementById("modifyCheckbox"),a=document.getElementById("modifyDelete");n.value=e.newTaskObj.title,o.value=e.newTaskObj.description,c.value=e.newTaskObj.dueDate,r.value=e.newTaskObj.projectTitle;const i=`clickedObj${N}`,s=f.find((e=>e.title===n.value&&e.description===o.value&&e.dueDate===c.value));E[i]=s,console.log(i),console.log(s),console.log(E);const d=`clickedCard${N}`,u=p(ne)||p(U);function p(e){return e.find((e=>e.querySelector(".projectName").textContent===r.value&&e.querySelector(".taskTitle").textContent===n.value&&e.querySelector(".taskDueDate").textContent===c.value))}b[d]=u,b[d].getElementsByClassName("taskCheckbox")[0].value?l.checked=!0:l.checked=!1,B.addEventListener("click",(()=>{j.close()})),a.addEventListener("click",(()=>{const e=ne.indexOf(b[d]),t=U.indexOf(b[d]);j.close(),-1!==e&&ne.splice(e,1),-1!==t&&U.splice(t,1),x()})),t.addEventListener("click",(()=>{E[i].title=n.value,E[i].description=o.value,E[i].dueDate=c.value,E[i].projectTitle=r.value,b[d].getElementsByClassName("projectName")[0].textContent=r.value,ie(b[d].getElementsByClassName("dayCount")[0],e),b[d].getElementsByClassName("taskTitle")[0].textContent=n.value,b[d].getElementsByClassName("taskDueDate")[0].textContent=c.value,b[d].getElementsByClassName("taskCheckbox")[0].checked=l.checked,b[d].style.backgroundColor=ee(E[i].projectTitle),j.close();const t=ne.indexOf(b[d]),a=U.indexOf(b[d]);l.checked?(U.includes(b[d])||U.push(b[d]),-1!==t&&ne.splice(t,1),b[d].getElementsByClassName("taskCheckbox")[0].value=!0,b[d].style.backgroundColor="rgb(153, 105, 105)"):(ne.includes(b[d])||ne.push(b[d]),-1!==a&&U.splice(a,1),b[d].style.backgroundColor=ee(b[d].getElementsByClassName("projectName")[0].textContent),b[d].getElementsByClassName("taskCheckbox")[0].value=null),x(),F()}))}(c)})),d.appendChild(u),d.appendChild(le("taskRemoveBtn","🗑️")),d.appendChild(p),i.append(s),i.append(d),r.appendChild(i),ne.push(r),x()}(r,l,a,i),e.value="",t.value="",n.value=""}()})),document.getElementById("projectConfirm").addEventListener("click",(e=>{e.preventDefault(),ue()})),document.querySelectorAll(".close-btn").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),Ce.close(),ye.close()}))})),document.getElementById("filter").addEventListener("change",(()=>{x()})),document.getElementById("checkboxArchive").addEventListener("click",(()=>{F()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,