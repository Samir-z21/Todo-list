(()=>{"use strict";var e={341:(e,t,n)=>{n.d(t,{Z:()=>l});var o=n(537),c=n.n(o),r=n(645),a=n.n(r)()(c());a.push([e.id,"/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n\n#projectsContainer {\n    width: 100%;\n    \n}\n\n\n.topProjectItem {\n    display: flex;\n    justify-content: space-between;\n}\n.projectTools {\n    display: flex;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn, .projectRemoveBtn {\n    cursor: pointer;\n    \n}\n\n.openTask, .openProject {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}","",{version:3,sources:["webpack://./dist/style.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;IACI,UAAU;IACV,SAAS;;AAEb;AACA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,aAAa;IACb,yCAAyC;AAC7C;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;AACnB;;AAEA,UAAU;AACV;IACI,sBAAsB;IACtB,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,8BAA8B;AAClC;;;AAGA;IACI,WAAW;;AAEf;;;AAGA;IACI,aAAa;IACb,8BAA8B;AAClC;AACA;IACI,aAAa;AACjB;;AAEA,mBAAmB;AACnB;IACI,uBAAuB;IACvB,aAAa;IACb,eAAe;IACf,SAAS;IACT,YAAY;AAChB;;AAEA,YAAY;AACZ;IACI,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;AACjB;AACA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,eAAe;;AAEnB;;AAEA;IACI,eAAe;;AAEnB;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,wBAAwB;IACxB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n\n#projectsContainer {\n    width: 100%;\n    \n}\n\n\n.topProjectItem {\n    display: flex;\n    justify-content: space-between;\n}\n.projectTools {\n    display: flex;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn, .projectRemoveBtn {\n    cursor: pointer;\n    \n}\n\n.openTask, .openProject {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}"],sourceRoot:""}]);const l=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,c,r){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var l=0;l<this.length;l++){var i=this[l][0];null!=i&&(a[i]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);o&&a[s[0]]||(void 0!==r&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=r),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),c&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=c):s[4]="".concat(c)),t.push(s))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(c," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},a=[],l=0;l<e.length;l++){var i=e[l],d=o.base?i[0]+o.base:i[0],s=r[d]||0,u="".concat(d," ").concat(s);r[d]=s+1;var p=n(u),m={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=c(m,o);o.byIndex=l,t.splice(l,0,{identifier:u,updater:A,references:1})}a.push(u)}return a}function c(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,c){var r=o(e=e||[],c=c||{});return function(e){e=e||[];for(var a=0;a<r.length;a++){var l=n(r[a]);t[l].references--}for(var i=o(e,c),d=0;d<r.length;d++){var s=n(r[d]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}r=i}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var c=void 0!==n.layer;c&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,c&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var c=t[o];if(void 0!==c)return c.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),c=n.n(o),r=n(569),a=n.n(r),l=n(565),i=n.n(l),d=n(216),s=n.n(d),u=n(589),p=n.n(u),m=n(341),A={};A.styleTagTransform=p(),A.setAttributes=i(),A.insert=a().bind(null,"head"),A.domAPI=c(),A.insertStyleElement=s(),t()(m.Z,A),m.Z&&m.Z.locals&&m.Z.locals;const C=[],f=[];class y{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.projectTitle=o}}class h extends y{constructor(e,t,n,o){super(e,t,n),this.color=o}}const g=document.getElementById("tasks-container"),v=document.getElementById("filter");function k(e){e.forEach((e=>{g.appendChild(e)}))}const B=function(){switch(g.querySelectorAll(".taskCard").forEach((e=>{g.removeChild(e)})),v.value){case"oldest":k(te);break;case"newest":k(te.slice().reverse());break;case"dueDate":function e(e,t){return new Date(e.querySelector(".taskDueDate").textContent)-new Date(t.querySelector(".taskDueDate").textContent)}k(te.slice().sort(e));break;case"project":function t(e,t){const n=e.querySelector(".projectName").textContent,o=t.querySelector(".projectName").textContent;return n.localeCompare(o)}k(te.slice().sort(t))}F()},x=document.getElementById("taskEdit"),b=document.querySelector(".closeModifyTask"),j={},E={},I=document.getElementById("projectEdit"),T=document.querySelector(".closeModifyProject"),w=document.getElementById("modifyProjectColorList"),D={},O={};let N=1;function S(e,t){const n=Array.from(projectColor.getElementsByTagName("option"));n.forEach((e=>{Array.from(w.getElementsByTagName("option")).some((t=>t.value===e.value))||w.appendChild(e.cloneNode(!0))}));const o=C.map((e=>e.color)),c=Array.from(w.getElementsByTagName("option"));console.log(n),console.log(o),o.forEach((e=>{c.filter((t=>t.value===e)).forEach((e=>{w.removeChild(e)}))})),"↗️"===t.target.textContent&&(Array.from(w.getElementsByTagName("option")).some((t=>t.value===e.value))||w.appendChild(e))}const P=document.getElementById("tasks-container"),L=document.getElementById("checkboxArchive"),q=document.getElementById("projectColor"),M=document.getElementById("projectsContainer"),R=document.getElementById("archivedProjectsContainer"),U=[],Y=[],V=[];let Z=[],$=null;function F(){L.checked?U.forEach((e=>{P.appendChild(e)})):U.forEach((e=>{P.appendChild(e),P.removeChild(e)}))}function H(e,t,n){const o=c(ne)||c(Y);function c(t){return t.find((t=>t.querySelector(".projectTitle").textContent===e.newProjectObj.title||t.querySelector(".projectTitle").textContent===n.value))}console.log(o);const r=o.getElementsByClassName("projectTitle")[0].textContent,a=(Array.from(q.getElementsByTagName("option")),l(C)||l(V));function l(e){return e.find((e=>e.title===r))}const i=Y.indexOf(o),d=V.indexOf(a),s=ne.indexOf(o),u=C.indexOf(a);if(-1!==i&&Y.slice(i),-1!==d&&V.slice(d),-1!==s&&ne.splice(s,1),-1!==u&&C.splice(u,1),o.parentNode===M?M.removeChild(o):R.removeChild(o),!o.querySelector(".projectCheckbox").checked){const t=document.createElement("option");t.value=e.newProjectObj.color,t.style.backgroundColor=e.newProjectObj.color,q.appendChild(t)}ee(r);const p=document.createElement("option");p.value=e.newProjectObj.color,p.style.backgroundColor=e.newProjectObj.color,S(p,t)}const W=document.getElementById("projectList"),G=document.getElementById("projectColor"),J=document.getElementById("modifyProjectList"),_=(document.getElementById("projectsContainer"),document.getElementById("checkboxArchive"));let X=[],z=[];const K=document.getElementById("tasks-container");function Q(e){const t=C.find((t=>t.title===e));return t?t.color:"blue"}function ee(e,t){const n=te.filter((t=>t.querySelector(".projectName").textContent===e)),o=U.filter((t=>t.querySelector(".projectName").textContent===e));X=n.concat(o);for(const e of te){const t=n.indexOf(e);-1!==t&&te.splice(t,1)}for(const e of U){const t=o.indexOf(e);-1!==t&&U.splice(t,1)}z=f.filter((t=>t.projectTitle.includes(e)));for(const e of f){const t=z.indexOf(e);-1!==t&&f.splice(t,1)}n.forEach((e=>{K.removeChild(e)})),_.checked&&o.forEach((e=>{K.removeChild(e)}));const c=Array.from(W.getElementsByTagName("option")),r=Array.from(J.getElementsByTagName("option")),a=c.find((t=>t.value===e)),l=r.find((t=>t.value===e));W.removeChild(a),J.removeChild(l)}const te=[],ne=[],oe=document.getElementById("projectsContainer");function ce(e,t,n,o,c){let r=function(e,t,n,o){const c=new h(e,t,n,o);return C.push(c),{newProjectObj:c,projectArray:C}}(e,t,n,o);const a=ae("projectItem");a.style.backgroundColor=o;const l=ae("topProjectItem");l.appendChild(re("projectTitle",r.newProjectObj.title));const i=ae("projectTools"),d=ae("openProject","↗️");d.addEventListener("click",(e=>{!function(e,t){I.showModal();const n=document.getElementById("editProjectTitle"),o=document.getElementById("editProjectDescription"),c=document.getElementById("editProjectDueDate"),r=document.getElementById("modifyProjectCheckbox"),a=document.getElementById("modifyProjectDelete"),l=document.querySelector("#taskModify"),i=document.getElementById("modifyProjectList");document.getElementById("projectColor"),n.value=e.newProjectObj.title,o.value=e.newProjectObj.description,c.value=e.newProjectObj.dueDate;const d=document.createElement("option");d.value=e.newProjectObj.color,d.style.backgroundColor=e.newProjectObj.color,S(d,t);const s=`clickedObj${N}`,u=C.find((e=>e.title===n.value&&e.description===o.value&&c.value===e.dueDate&&d.value===e.color));O[s]=u;const p=`clickedModifyProject${N}`,m=A(ne)||A(Y);function A(e){return e.find((e=>e.querySelector(".projectTitle").textContent===n.value&&e.querySelector(".projectDueDate").textContent===c.value))}D[p]=m,D[p].getElementsByClassName("projectCheckbox")[0].checked?r.checked=!0:r.checked=!1,T.addEventListener("click",(()=>{I.close()})),a.addEventListener("click",(()=>{I.close(),H(e,t,n)})),l.addEventListener("click",(()=>{E[clickedObj].title=editTaskTitle.value,E[clickedObj].description=editTaskDescription.value,E[clickedObj].dueDate=editTaskDueDate.value,E[clickedObj].projectTitle=i.value,j[clickedCard].getElementsByClassName("projectName")[0].textContent=i.value,le(j[clickedCard].getElementsByClassName("dayCount")[0],accessTask),j[clickedCard].getElementsByClassName("taskTitle")[0].textContent=editTaskTitle.value,j[clickedCard].getElementsByClassName("taskDueDate")[0].textContent=editTaskDueDate.value,j[clickedCard].getElementsByClassName("taskCheckbox")[0].checked=modifyCheckbox.checked,j[clickedCard].style.backgroundColor=Q(E[clickedObj].projectTitle),x.close();const e=te.indexOf(j[clickedCard]),t=U.indexOf(j[clickedCard]);modifyCheckbox.checked?(U.includes(j[clickedCard])||U.push(j[clickedCard]),-1!==e&&te.splice(e,1),j[clickedCard].getElementsByClassName("taskCheckbox")[0].value=!0,j[clickedCard].style.backgroundColor="rgb(153, 105, 105)"):(te.includes(j[clickedCard])||te.push(j[clickedCard]),-1!==t&&U.splice(t,1),j[clickedCard].style.backgroundColor=Q(j[clickedCard].getElementsByClassName("projectName")[0].textContent),j[clickedCard].getElementsByClassName("taskCheckbox")[0].value=null),B(),F()}))}(r,e)}));const s=document.createElement("input");s.type="checkbox",s.classList.add("projectCheckbox"),s.value=null,s.addEventListener("click",(e=>{!function(e,t){const n=o(ne)||o(Y);function o(e){return e.find((e=>e.querySelector(".projectTitle").textContent===t.newProjectObj.title&&e.querySelector(".projectDueDate").textContent===t.newProjectObj.dueDate))}const c=n.getElementsByClassName("projectTitle")[0].textContent,r=Array.from(q.getElementsByTagName("option")),a=l(C)||l(V);function l(e){return e.find((e=>e.title===c))}if(console.log(a),e.target.checked){const e=ne.indexOf(n),o=C.indexOf(a);Y.includes(n)||Y.push(n),V.includes(a)||V.push(a),-1!==e&&ne.splice(e,1),-1!==o&&C.splice(o,1),M.removeChild(n),R.appendChild(n);const r=document.createElement("option");r.value=t.newProjectObj.color,r.style.backgroundColor=t.newProjectObj.color,q.appendChild(r),n.style.backgroundColor="grey",ee(c)}else{const o=Y.indexOf(n),l=V.indexOf(a);if(ne.length>=10)return e.preventDefault(),n.querySelector(".projectCheckbox").checked=!0,void alert("Can't add archived project. Project limit reached");if(function(e){return console.log(C),console.log(V),Z=C.map((e=>e.title)),$=V.map((e=>e.title)),Z.includes(e.title)}(a))return e.preventDefault(),n.querySelector(".projectCheckbox").checked=!0,void alert("Can't add archived project. This project name is already in use");{-1!==o&&Y.splice(o,1),-1!==l&&V.splice(l,1),ne.includes(n)||ne.push(n),C.includes(a)||C.push(a);const e=r[0].value;q.removeChild(r[0]),n.style.backgroundColor=e,t.newProjectObj.color=e,a.color=e,R.removeChild(n),M.appendChild(n),function(e,t){const n=X.filter((t=>t.querySelector(".projectName").textContent===e)),o=n.filter((e=>0==e.querySelector(".taskCheckbox").value)),c=n.filter((e=>"true"===e.querySelector(".taskCheckbox").value));o.forEach((e=>{te.includes(e)||te.push(e)})),c.forEach((e=>{U.includes(e)||U.push(e)})),z.filter((t=>t.projectTitle===e)).forEach((e=>{f.includes(e)||f.push(e)})),o.forEach((e=>{K.appendChild(e),e.style.backgroundColor=t})),c.forEach((e=>{_.checked&&(K.appendChild(e),e.style.backgroundColor="rgb(153, 105, 105)")}));const r=Array.from(W.getElementsByTagName("option")),a=Array.from(J.getElementsByTagName("option")),l=document.createElement("option");l.value=e,l.text=e;const i=document.createElement("option");i.value=e,i.text=e,a.includes(l)||J.appendChild(l),r.includes(i)||W.appendChild(i)}(c,e)}}const i=document.createElement("option");i.value=t.newProjectObj.color,i.style.backgroundColor=t.newProjectObj.color,S(i,e)}(e,r)}));const u=document.createElement("div");u.classList.add("projectRemoveBtn"),u.textContent="🗑️",u.addEventListener("click",(e=>{H(r,e)})),i.appendChild(s),i.appendChild(u),i.appendChild(d),l.appendChild(i),a.appendChild(l),a.appendChild(re("projectDueDate",r.newProjectObj.dueDate)),function(e){const t=document.createElement("option"),n=document.createElement("option");n.value=e,n.text=e,J.appendChild(n),t.value=e,t.text=e,W.appendChild(t)}(e),ne.push(a),oe.appendChild(a);const p=document.createElement("option");p.value=r.newProjectObj.color,p.style.backgroundColor=r.newProjectObj.color,S(p,c)}function re(e,t){const n=document.createElement("div");return n.classList.add(e),n.textContent=t,"taskRemoveBtn"===e&&n.addEventListener("click",(e=>{!function(e){const t=n(te)||n(U);function n(t){return t.find((t=>t.querySelector(".taskRemoveBtn")===e.target))}const o=te.indexOf(t),c=U.indexOf(t);-1!==o&&te.splice(o,1),-1!==c&&U.splice(c,1),B()}(e)})),n}function ae(e,t){const n={};return n[e]=document.createElement("div"),n[e].classList.add(e),n[e].textContent=t,n[e]}function le(e,t){const n=new Date,o=new Date(t.newTaskObj.dueDate);e.textContent=` Due in: ${Math.ceil((o-n)/864e5)} days`,e.style.color=o-n<0?"red":"black"}const ie=document.getElementById("taskDialog"),de=document.getElementById("projectDialog");function se(){const e=document.getElementById("projectTitle"),t=document.getElementById("projectDescription"),n=document.getElementById("projectDueDate"),o=document.getElementById("projectColor");if(!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");const c=C.find((t=>t.title===e.value));let r=e.value,a=t.value,l=n.value,i=o.value;if(c)return void alert("can't use same project name");if(function(e){const t=Array.from(G.getElementsByTagName("option")).find((t=>t.value===e));if(!G.contains(t))return!0}(i))return void alert("Max amount of projects reached");de.close();const d=Array.from(o.getElementsByTagName("option")).find((e=>e.value===i));o.removeChild(d),ce(r,a,l,i,event),e.value="",t.value="",n.value=""}document.getElementById("projectColor");const ue=document.getElementById("taskTitle"),pe=document.getElementById("projectTitle"),me=document.getElementById("taskBtn"),Ae=document.getElementById("taskDialog");me.addEventListener("click",(()=>{Ae.showModal(),ue.focus()}));const Ce=document.getElementById("projectBtn"),fe=document.getElementById("projectDialog");Ce.addEventListener("click",(()=>{fe.showModal(),pe.focus()})),document.getElementById("taskConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("taskTitle"),t=document.getElementById("taskDescription"),n=document.getElementById("taskDueDate"),o=document.getElementById("projectList"),c=o.options[o.selectedIndex];if(e.focus(),!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let r=e.value,a=t.value,l=n.value,i=c.value;ie.close(),function(e,t,n,o){let c=function(e,t,n,o){const c=new y(e,t,n,o);return f.push(c),{newTaskObj:c,taskArray:f}}(e,t,n,o);const r=ae("taskCard");r.style.backgroundColor=Q(o);const a=ae("topDetailsCard");a.appendChild(re("projectName",c.newTaskObj.projectTitle));const l=document.createElement("div");l.classList.add("dayCount"),le(l,c),a.appendChild(l),r.appendChild(a);const i=ae("bottomCard"),d=ae("centerInfo");d.appendChild(re("taskTitle",c.newTaskObj.title)),d.appendChild(re("taskDueDate",c.newTaskObj.dueDate));const s=ae("rightSide"),u=document.createElement("input");u.type="checkbox",u.classList.add("taskCheckbox"),u.value=null,u.addEventListener("click",(e=>{!function(e){const t=n(te)||n(U);function n(t){return t.find((t=>t.querySelector(".taskCheckbox")===e.target))}const o=U.indexOf(t),c=te.indexOf(t);console.log(t);const r=t.getElementsByClassName("projectName")[0].textContent;e.target.checked?(U.includes(t)||U.push(t),-1!==c&&te.splice(c,1),t.getElementsByClassName("taskCheckbox")[0].value=!0,t.style.backgroundColor="rgb(153, 105, 105)"):(te.includes(t)||te.push(t),-1!==o&&U.splice(o,1),t.style.backgroundColor=Q(r),Q(r)||(t.style.backgroundColor="blue"),t.getElementsByClassName("taskCheckbox")[0].value=null),B(),F()}(e)}));const p=document.createElement("div");p.textContent="↗️",p.classList.add("openTask"),p.addEventListener("click",(e=>{!function(e){x.showModal();const t=document.querySelector("#taskModify"),n=document.getElementById("editTaskTitle"),o=document.getElementById("editTaskDescription"),c=document.getElementById("editTaskDueDate"),r=document.getElementById("modifyProjectList"),a=document.getElementById("modifyCheckbox"),l=document.getElementById("modifyDelete");n.value=e.newTaskObj.title,o.value=e.newTaskObj.description,c.value=e.newTaskObj.dueDate,r.value=e.newTaskObj.projectTitle;const i=`clickedObj${N}`,d=f.find((e=>e.title===n.value&&e.description===o.value&&e.dueDate===c.value));E[i]=d,console.log(i),console.log(d),console.log(E);const s=`clickedCard${N}`,u=p(te)||p(U);function p(e){return e.find((e=>e.querySelector(".projectName").textContent===r.value&&e.querySelector(".taskTitle").textContent===n.value&&e.querySelector(".taskDueDate").textContent===c.value))}j[s]=u,j[s].getElementsByClassName("taskCheckbox")[0].value?a.checked=!0:a.checked=!1,b.addEventListener("click",(()=>{x.close()})),l.addEventListener("click",(()=>{const e=te.indexOf(j[s]),t=U.indexOf(j[s]);x.close(),-1!==e&&te.splice(e,1),-1!==t&&U.splice(t,1),B()})),t.addEventListener("click",(()=>{E[i].title=n.value,E[i].description=o.value,E[i].dueDate=c.value,E[i].projectTitle=r.value,j[s].getElementsByClassName("projectName")[0].textContent=r.value,le(j[s].getElementsByClassName("dayCount")[0],e),j[s].getElementsByClassName("taskTitle")[0].textContent=n.value,j[s].getElementsByClassName("taskDueDate")[0].textContent=c.value,j[s].getElementsByClassName("taskCheckbox")[0].checked=a.checked,j[s].style.backgroundColor=Q(E[i].projectTitle),x.close();const t=te.indexOf(j[s]),l=U.indexOf(j[s]);a.checked?(U.includes(j[s])||U.push(j[s]),-1!==t&&te.splice(t,1),j[s].getElementsByClassName("taskCheckbox")[0].value=!0,j[s].style.backgroundColor="rgb(153, 105, 105)"):(te.includes(j[s])||te.push(j[s]),-1!==l&&U.splice(l,1),j[s].style.backgroundColor=Q(j[s].getElementsByClassName("projectName")[0].textContent),j[s].getElementsByClassName("taskCheckbox")[0].value=null),B(),F()}))}(c)})),s.appendChild(u),s.appendChild(re("taskRemoveBtn","🗑️")),s.appendChild(p),i.append(d),i.append(s),r.appendChild(i),te.push(r),B()}(r,a,l,i),e.value="",t.value="",n.value=""}()})),document.getElementById("projectConfirm").addEventListener("click",(e=>{e.preventDefault(),se()})),document.querySelectorAll(".close-btn").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),Ae.close(),fe.close()}))})),document.getElementById("filter").addEventListener("change",(()=>{B()})),document.getElementById("checkboxArchive").addEventListener("click",(()=>{F()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,