(()=>{"use strict";var e={341:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),a=n.n(o),r=n(645),c=n.n(r)()(a());c.push([e.id,"/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn {\n    cursor: pointer;\n    border: 1px solid darkred;\n}\n\n.openTask {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}","",{version:3,sources:["webpack://./dist/style.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;IACI,UAAU;IACV,SAAS;;AAEb;AACA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,aAAa;IACb,yCAAyC;AAC7C;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;AACnB;;AAEA,UAAU;AACV;IACI,sBAAsB;IACtB,aAAa;AACjB;;AAEA,mBAAmB;AACnB;IACI,uBAAuB;IACvB,aAAa;IACb,eAAe;IACf,SAAS;IACT,YAAY;AAChB;;AAEA,YAAY;AACZ;IACI,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;AACjB;AACA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,eAAe;;AAEnB;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,wBAAwB;IACxB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn {\n    cursor: pointer;\n    border: 1px solid darkred;\n}\n\n.openTask {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}"],sourceRoot:""}]);const s=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,a,r){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(c[l]=!0)}for(var i=0;i<e.length;i++){var d=[].concat(e[i]);o&&c[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(a," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},c=[],s=0;s<e.length;s++){var l=e[s],i=o.base?l[0]+o.base:l[0],d=r[i]||0,u="".concat(i," ").concat(d);r[i]=d+1;var p=n(u),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=a(A,o);o.byIndex=s,t.splice(s,0,{identifier:u,updater:m,references:1})}c.push(u)}return c}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var r=o(e=e||[],a=a||{});return function(e){e=e||[];for(var c=0;c<r.length;c++){var s=n(r[c]);t[s].references--}for(var l=o(e,a),i=0;i<r.length;i++){var d=n(r[i]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}r=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,a&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var a=t[o];if(void 0!==a)return a.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),a=n.n(o),r=n(569),c=n.n(r),s=n(565),l=n.n(s),i=n(216),d=n.n(i),u=n(589),p=n.n(u),A=n(341),m={};m.styleTagTransform=p(),m.setAttributes=l(),m.insert=c().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=d(),t()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const C=[],f=[];class g{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.projectTitle=o}}class h extends g{constructor(e,t,n,o){super(e,t,n),this.color=o}}const v=document.getElementById("projectList"),y=document.getElementById("projectColor"),B=document.getElementById("modifyProjectList");let k=1;function x(e){const t=C.find((t=>t.title===e));return t?t.color:"blue"}function b(e){const t=Array.from(y.getElementsByTagName("option")).find((t=>t.value===e));if(!y.contains(t))return!0;v.childElementCount===k&&(k++,y.removeChild(t))}const I=document.getElementById("tasks-container"),E=document.getElementById("filter");function j(e){e.forEach((e=>{I.appendChild(e)}))}const T=function(){switch(I.querySelectorAll(".taskCard").forEach((e=>{I.removeChild(e)})),E.value){case"oldest":j(P);break;case"newest":j(P.slice().reverse());break;case"dueDate":function e(e,t){return new Date(e.querySelector(".taskDueDate").textContent)-new Date(t.querySelector(".taskDueDate").textContent)}j(P.slice().sort(e));break;case"project":function t(e,t){const n=e.querySelector(".projectName").textContent,o=t.querySelector(".projectName").textContent;return n.localeCompare(o)}j(P.slice().sort(t))}N()},w=document.getElementById("tasks-container"),D=document.getElementById("checkboxArchive"),S=[];function N(){D.checked?S.forEach((e=>{w.appendChild(e)})):S.forEach((e=>{w.appendChild(e),w.removeChild(e)}))}const L=document.getElementById("taskEdit"),O=document.querySelector(".closeModifyTask"),q={},M={};const P=[];const R=document.getElementById("sidebar");function U(e,t){const n=document.createElement("div");return n.classList.add(e),n.textContent=t,"taskRemoveBtn"===e&&n.addEventListener("click",(e=>{!function(e){const t=n(P)||n(S);function n(t){return t.find((t=>t.querySelector(".taskRemoveBtn")===e.target))}const o=P.indexOf(t),a=S.indexOf(t);-1!==o&&P.splice(o,1),-1!==a&&S.splice(a,1),T()}(e)})),n}function Y(e){const t={};return t[e]=document.createElement("div"),t[e].classList.add(e),t[e]}function V(e,t){const n=new Date,o=new Date(t.newTaskObj.dueDate);e.textContent=` Due in: ${Math.ceil((o-n)/864e5)} days`,e.style.color=o-n<0?"red":"black"}const Z=document.getElementById("taskDialog"),$=document.getElementById("projectDialog"),F=document.getElementById("taskTitle"),H=document.getElementById("projectTitle"),J=document.getElementById("taskBtn"),W=document.getElementById("taskDialog");J.addEventListener("click",(()=>{W.showModal(),F.focus()}));const _=document.getElementById("projectBtn"),G=document.getElementById("projectDialog");_.addEventListener("click",(()=>{G.showModal(),H.focus()})),document.getElementById("taskConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("taskTitle"),t=document.getElementById("taskDescription"),n=document.getElementById("taskDueDate"),o=document.getElementById("projectList"),a=o.options[o.selectedIndex];if(e.focus(),!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let r=e.value,c=t.value,s=n.value,l=a.value;Z.close(),function(e,t,n,o){let a=function(e,t,n,o){const a=new g(e,t,n,o);return f.push(a),{newTaskObj:a,taskArray:f}}(e,t,n,o);const r=Y("taskCard");r.style.backgroundColor=x(o);const c=Y("topDetailsCard");c.appendChild(U("projectName",a.newTaskObj.projectTitle));const s=document.createElement("div");s.classList.add("dayCount"),V(s,a),c.appendChild(s),r.appendChild(c);const l=Y("bottomCard"),i=Y("centerInfo");i.appendChild(U("taskTitle",a.newTaskObj.title)),i.appendChild(U("taskDueDate",a.newTaskObj.dueDate));const d=Y("rightSide"),u=document.createElement("input");u.type="checkbox",u.classList.add("taskCheckbox"),u.value=null,u.addEventListener("click",(e=>{!function(e){const t=n(P)||n(S);function n(t){return t.find((t=>t.querySelector(".taskCheckbox")===e.target))}const o=S.indexOf(t),a=P.indexOf(t),r=t.getElementsByClassName("projectName")[0].textContent;e.target.checked?(S.includes(t)||S.push(t),-1!==a&&P.splice(a,1),t.getElementsByClassName("taskCheckbox")[0].value=!0,console.log(t.getElementsByClassName("taskCheckbox")[0]),t.style.backgroundColor="rgb(153, 105, 105)"):(P.includes(t)||P.push(t),-1!==o&&S.splice(o,1),t.style.backgroundColor=x(r),x(r)||(t.style.backgroundColor="blue"),t.getElementsByClassName("taskCheckbox")[0].value=null),console.log(S),T(),N()}(e)}));const p=document.createElement("div");p.textContent="↗️",p.classList.add("openTask"),p.addEventListener("click",(e=>{!function(e){console.log(S),console.log(P),L.showModal();const t=document.querySelector("#taskModify"),n=document.getElementById("editTaskTitle"),o=document.getElementById("editTaskDescription"),a=document.getElementById("editTaskDueDate"),r=document.getElementById("modifyProjectList"),c=document.getElementById("modifyCheckbox");n.value=e.newTaskObj.title,o.value=e.newTaskObj.description,a.value=e.newTaskObj.dueDate,r.value=e.newTaskObj.projectTitle;const s="clickedObj1",l=f.find((e=>e.title===n.value&&e.description===o.value&&e.dueDate===a.value));M[s]=l;const i="clickedCard1",d=u(P)||u(S);function u(e){return e.find((e=>e.querySelector(".projectName").textContent===r.value&&e.querySelector(".taskTitle").textContent===n.value&&e.querySelector(".taskDueDate").textContent===a.value))}q[i]=d,q[i].getElementsByClassName("taskCheckbox")[0].value?c.checked=!0:c.checked=!1,O.addEventListener("click",(()=>{L.close()})),t.addEventListener("click",(()=>{M[s].title=n.value,M[s].description=o.value,M[s].dueDate=a.value,M[s].projectTitle=r.value;const t=P.indexOf(q[i]),l=S.indexOf(q[i]);-1!==t&&(q[i].getElementsByClassName("projectName")[0].textContent=r.value,V(q[i].getElementsByClassName("dayCount")[0],e),q[i].getElementsByClassName("taskTitle")[0].textContent=n.value,q[i].getElementsByClassName("taskDueDate")[0].textContent=a.value,q[i].getElementsByClassName("taskCheckbox")[0].checked=c.checked,q[i].style.backgroundColor=x(M[s].projectTitle)),L.close(),c.checked?(S.includes(q[i])||S.push(q[i]),-1!==t&&P.splice(t,1),q[i].getElementsByClassName("taskCheckbox")[0].value=!0,q[i].style.backgroundColor="rgb(153, 105, 105)"):(P.includes(q[i])||P.push(q[i]),-1!==l&&S.splice(l,1),q[i].style.backgroundColor=x(q[i].getElementsByClassName("projectName")[0].textContent),q[i].getElementsByClassName("taskCheckbox")[0].value=null),console.log(S),T(),N()}))}(a)})),d.appendChild(u),d.appendChild(U("taskRemoveBtn","🗑️")),d.appendChild(p),l.append(i),l.append(d),r.appendChild(l),P.push(r),T()}(r,c,s,l),e.value="",t.value="",n.value=""}()})),document.getElementById("projectConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("projectTitle"),t=document.getElementById("projectDescription"),n=document.getElementById("projectDueDate"),o=document.getElementById("projectColor");if(!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let a=e.value,r=t.value,c=n.value,s=o.value;C.find((e=>e.title===a))?alert("can't use same project name"):b(s)?alert("Max amount of projects reached"):($.close(),function(e,t,n,o){let a=function(e,t,n,o){const a=new h(e,t,n,o);return C.push(a),{newProjectObj:a,projectArray:C}}(e,t,n,o);const r=Y("projectItem");r.style.backgroundColor=o,r.appendChild(U("projectTitle",a.newProjectObj.title)),r.appendChild(U("projectDueDate",a.newProjectObj.dueDate)),function(e){const t=document.createElement("option"),n=document.createElement("option");n.value=e,n.text=e,B.appendChild(n),t.value=e,t.text=e,v.appendChild(t)}(e),R.appendChild(r)}(a,r,c,s),e.value="",t.value="",n.value="")}()})),document.querySelectorAll(".close-btn").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),W.close(),G.close()}))})),document.getElementById("filter").addEventListener("change",(()=>{T()})),document.getElementById("checkboxArchive").addEventListener("click",(()=>{N()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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NkQsRUFBWXpMLE1BQU15SixnQkFBa0IzRixFQUlwQzJILEVBQVk3SyxZQUFZaUcsRUFBYyxlQUFnQnlFLEVBQWNDLGNBQWM5SCxRQUVsRmdJLEVBQVk3SyxZQUFZaUcsRUFBYyxpQkFBa0J5RSxFQUFjQyxjQUFjNUgsVUp0RjVGLFNBQTBCRixHQUN0QixNQUFNaUksRUFBZ0J2TCxTQUFTVyxjQUFjLFVBQ3ZDNkssRUFBc0J4TCxTQUFTVyxjQUFjLFVBRW5ENkssRUFBb0I3RyxNQUFRckIsRUFDNUJrSSxFQUFvQjVFLEtBQU90RCxFQUMzQlUsRUFBa0J2RCxZQUFZK0ssR0FFOUJELEVBQWM1RyxNQUFRckIsRUFDdEJpSSxFQUFjM0UsS0FBT3RELEVBQ3JCTyxFQUFZcEQsWUFBWThLLEVBSzVCLENJeUVRRSxDQUFnQm5JLEdBR3BCbUQsRUFBa0JoRyxZQUFZNkssRUFDbEMsQ0MxQklJLENBQVlwSSxFQUFPQyxFQUFhQyxFQUFTRyxHQUV6Q0YsRUFBYWtCLE1BQVEsR0FDckJzRyxFQUFtQnRHLE1BQVEsR0FDM0J1RyxFQUFldkcsTUFBUSxHQUMzQixDQ3ZDSWdILEVBQWMsSUFLRDNMLFNBQVNvRixpQkFBaUIsY0FDbENGLFNBQVMwRyxJQUNkQSxFQUFJN0UsaUJBQWlCLFNBQVNDLElBQzlCQSxFQUFNMEIsaUJBQ04sRUFBV1EsUUFDWCxFQUFjQSxPQUFPLEdBQ25CLElBS1NsSixTQUFTOEQsZUFBZSxVQUNoQ2lELGlCQUFpQixVQUFVLEtBQzlCLEdBQVksSUFHUS9HLFNBQVM4RCxlQUFlLG1CQUNoQ2lELGlCQUFpQixTQUFTLEtBQ3RDZCxHQUFTLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9kaXN0L3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vZGlzdC9zdHlsZS5jc3M/YjVjNiIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvb2JqZWN0Q29udHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbGluay1Qcm9qZWN0VGFzay5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvZmlsdGVyLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9kbHQtYXJjaHYuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2VkaXQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2xvYWRDb25lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3N0b3JlTW9kYWxzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLyogOnJvb3Qge1xuICAgIC0tXG59XG4qLyBcblxuKiB7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDA7XG4gICAgXG59XG5ib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmV5O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZTogMjB2aCA3MHZoIDEwdmggLyAxMHZ3IDkwdnc7XG59XG5cbi8qSGVhZGVyKi9cbiNoZWFkZXIge1xuICAgIGdyaWQtY29sdW1uOiAyLzM7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xuICAgIHBhZGRpbmctdG9wOiA1MHB4O1xufVxuXG4jYnV0dG9ucyB7XG4gICAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG4gICAgcGFkZGluZy1yaWdodDogMzBweDtcbn1cblxuYnV0dG9uIHtcbiAgICB3aWR0aDogMjAwcHg7XG4gICAgaGVpZ2h0OiA1MHB4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLypTaWRlYmFyKi8gXG4jc2lkZWJhciB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgYmx1ZTtcbiAgICBncmlkLXJvdzogMS8zO1xufVxuXG4vKlRhc2tzIGNvbnRhaW5lciAqL1xuI3Rhc2tzLWNvbnRhaW5lciB7XG4gICAgYm9yZGVyOiAxcHggc29saWQgZ3JlZW47XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgZ2FwOiAyMHB4O1xuICAgIG1hcmdpbjogMzBweDtcbn1cblxuLyp0YXNrIGNhcmQqL1xuLnRhc2tDYXJke1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO1xuICAgIHBhZGRpbmc6IDIwcHg7XG59XG4udG9wRGV0YWlsc0NhcmQge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZ2FwOiAxMHB4O1xufVxuXG4uYm90dG9tQ2FyZCB7XG4gICAgZGlzcGxheTogZmxleDtcbn1cblxuLmNlbnRlckluZm8ge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4udGFza0NoZWNrYm94IHtcbiAgICB3aWR0aDogMjBweDtcbiAgICBoZWlnaHQ6IDIwcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLnRhc2tSZW1vdmVCdG4ge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBkYXJrcmVkO1xufVxuXG4ub3BlblRhc2sge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcblxufVxuXG4vKkZvb3RlciovXG4jZm9vdGVyIHtcbiAgICBncmlkLWNvbHVtbjogMS8zO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHB1cnBsZTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9kaXN0L3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7O0NBR0M7O0FBRUQ7SUFDSSxVQUFVO0lBQ1YsU0FBUzs7QUFFYjtBQUNBO0lBQ0ksc0JBQXNCO0lBQ3RCLFVBQVU7SUFDVixTQUFTO0lBQ1QsYUFBYTtJQUNiLHlDQUF5QztBQUM3Qzs7QUFFQSxTQUFTO0FBQ1Q7SUFDSSxnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLG9CQUFvQjtJQUNwQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osWUFBWTtJQUNaLGVBQWU7QUFDbkI7O0FBRUEsVUFBVTtBQUNWO0lBQ0ksc0JBQXNCO0lBQ3RCLGFBQWE7QUFDakI7O0FBRUEsbUJBQW1CO0FBQ25CO0lBQ0ksdUJBQXVCO0lBQ3ZCLGFBQWE7SUFDYixlQUFlO0lBQ2YsU0FBUztJQUNULFlBQVk7QUFDaEI7O0FBRUEsWUFBWTtBQUNaO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixzQkFBc0I7SUFDdEIsYUFBYTtBQUNqQjtBQUNBO0lBQ0ksYUFBYTtJQUNiLFNBQVM7QUFDYjs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osc0JBQXNCO0lBQ3RCLHNCQUFzQjtJQUN0QixlQUFlO0FBQ25COztBQUVBO0lBQ0ksZUFBZTtJQUNmLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLGVBQWU7O0FBRW5COztBQUVBLFNBQVM7QUFDVDtJQUNJLGdCQUFnQjtJQUNoQix3QkFBd0I7SUFDeEIsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogOnJvb3Qge1xcbiAgICAtLVxcbn1cXG4qLyBcXG5cXG4qIHtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBcXG59XFxuYm9keSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZXk7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZTogMjB2aCA3MHZoIDEwdmggLyAxMHZ3IDkwdnc7XFxufVxcblxcbi8qSGVhZGVyKi9cXG4jaGVhZGVyIHtcXG4gICAgZ3JpZC1jb2x1bW46IDIvMztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xcbiAgICBwYWRkaW5nLXRvcDogNTBweDtcXG59XFxuXFxuI2J1dHRvbnMge1xcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcXG4gICAgcGFkZGluZy1yaWdodDogMzBweDtcXG59XFxuXFxuYnV0dG9uIHtcXG4gICAgd2lkdGg6IDIwMHB4O1xcbiAgICBoZWlnaHQ6IDUwcHg7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLypTaWRlYmFyKi8gXFxuI3NpZGViYXIge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibHVlO1xcbiAgICBncmlkLXJvdzogMS8zO1xcbn1cXG5cXG4vKlRhc2tzIGNvbnRhaW5lciAqL1xcbiN0YXNrcy1jb250YWluZXIge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBncmVlbjtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICBnYXA6IDIwcHg7XFxuICAgIG1hcmdpbjogMzBweDtcXG59XFxuXFxuLyp0YXNrIGNhcmQqL1xcbi50YXNrQ2FyZHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmx1ZTtcXG4gICAgcGFkZGluZzogMjBweDtcXG59XFxuLnRvcERldGFpbHNDYXJkIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZ2FwOiAxMHB4O1xcbn1cXG5cXG4uYm90dG9tQ2FyZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5jZW50ZXJJbmZvIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnRhc2tDaGVja2JveCB7XFxuICAgIHdpZHRoOiAyMHB4O1xcbiAgICBoZWlnaHQ6IDIwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnRhc2tSZW1vdmVCdG4ge1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGRhcmtyZWQ7XFxufVxcblxcbi5vcGVuVGFzayB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG5cXG59XFxuXFxuLypGb290ZXIqL1xcbiNmb290ZXIge1xcbiAgICBncmlkLWNvbHVtbjogMS8zO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBwdXJwbGU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLy9pbXBvcnQgbG9hZFRhc2sgZnJvbSBcIi4vbG9hZENvbmVudFwiO1xuY29uc3QgcHJvamVjdEFycmF5ID0gW107XG5jb25zdCB0YXNrQXJyYXkgPSBbXVxuXG5jbGFzcyBUYXNrIHtcbiAgICBjb25zdHJ1Y3RvciAodGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcm9qZWN0VGl0bGUpIHtcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlLFxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XG4gICAgICAgIHRoaXMucHJvamVjdFRpdGxlID0gcHJvamVjdFRpdGxlO1xuICAgIH0gIFxufVxuXG5jbGFzcyBQcm9qZWN0IGV4dGVuZHMgVGFzayB7XG4gICAgY29uc3RydWN0b3IgKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgY29sb3IpIHtcbiAgICAgICAgc3VwZXIgKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSk7XG4gICAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFkZFRhc2sgKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJvamVjdE5hbWUpIHtcbiAgICBjb25zdCBuZXdUYXNrT2JqID0gbmV3IFRhc2sgKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgcHJvamVjdE5hbWUpO1xuICAgIHRhc2tBcnJheS5wdXNoKG5ld1Rhc2tPYmopO1xuXG4gICAgcmV0dXJuIHtuZXdUYXNrT2JqLCB0YXNrQXJyYXl9XG59XG5mdW5jdGlvbiBhZGRQcm9qZWN0ICh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIGNvbG9yKSB7XG4gICAgY29uc3QgbmV3UHJvamVjdE9iaiA9IG5ldyBQcm9qZWN0ICh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIGNvbG9yKTtcbiAgICBwcm9qZWN0QXJyYXkucHVzaChuZXdQcm9qZWN0T2JqKTtcbiAgICBcbiAgICByZXR1cm4ge25ld1Byb2plY3RPYmosIHByb2plY3RBcnJheX1cbn1cblxuXG5cblxuZXhwb3J0IHthZGRUYXNrLCBhZGRQcm9qZWN0ICwgdGFza0FycmF5LCBwcm9qZWN0QXJyYXl9IiwiaW1wb3J0IHsgcHJvamVjdEFycmF5IH0gZnJvbSBcIi4vb2JqZWN0Q29udHJ1Y3RvclwiO1xuY29uc3QgcHJvamVjdExpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2plY3RMaXN0XCIpO1xuY29uc3QgcHJvamVjdENvbG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3RDb2xvcicpO1xuXG5jb25zdCBtb2RpZnlQcm9qZWN0TGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RpZnlQcm9qZWN0TGlzdCcpO1xuXG5sZXQgZWxlbWVudENvdW50ID0gMTtcblxuZnVuY3Rpb24gbGlua1Byb2plY3ROYW1lICh0aXRsZSl7XG4gICAgY29uc3QgcHJvamVjdE9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgIGNvbnN0IG1vZGlmeVByb2plY3RPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcblxuICAgIG1vZGlmeVByb2plY3RPcHRpb24udmFsdWUgPSB0aXRsZTtcbiAgICBtb2RpZnlQcm9qZWN0T3B0aW9uLnRleHQgPSB0aXRsZTtcbiAgICBtb2RpZnlQcm9qZWN0TGlzdC5hcHBlbmRDaGlsZChtb2RpZnlQcm9qZWN0T3B0aW9uKTtcblxuICAgIHByb2plY3RPcHRpb24udmFsdWUgPSB0aXRsZTtcbiAgICBwcm9qZWN0T3B0aW9uLnRleHQgPSB0aXRsZTtcbiAgICBwcm9qZWN0TGlzdC5hcHBlbmRDaGlsZChwcm9qZWN0T3B0aW9uKTtcblxuICAgXG5cblxufVxuXG5mdW5jdGlvbiBjb2xvclRhc2sgKHByb2plY3RUaXRsZSkge1xuICAgIGNvbnN0IG1hdGNoaW5nT2JqID0gcHJvamVjdEFycmF5LmZpbmQob2JqID0+IG9iai50aXRsZSA9PT0gcHJvamVjdFRpdGxlKTtcbiAgICBcbiAgICBcbiAgICBpZiAobWF0Y2hpbmdPYmopIHtcbiAgICByZXR1cm4gbWF0Y2hpbmdPYmouY29sb3JcbiAgICB9IGVsc2UgcmV0dXJuIFwiYmx1ZVwiXG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNvbG9yT3B0IChjb2xvcikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBBcnJheS5mcm9tKHByb2plY3RDb2xvci5nZXRFbGVtZW50c0J5VGFnTmFtZSgnb3B0aW9uJykpO1xuXG4gICAgY29uc3QgY2hvc2VuT3B0aW9uID0gb3B0aW9ucy5maW5kKG9wdGlvbiA9PiBvcHRpb24udmFsdWUgPT09IGNvbG9yKVxuXG4gICAgaWYgKCEocHJvamVjdENvbG9yLmNvbnRhaW5zKGNob3Nlbk9wdGlvbikpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHByb2plY3RMaXN0LmNoaWxkRWxlbWVudENvdW50ID09PSBlbGVtZW50Q291bnQpIHtcbiAgICAgICAgZWxlbWVudENvdW50Kys7XG4gICAgICAgIHByb2plY3RDb2xvci5yZW1vdmVDaGlsZChjaG9zZW5PcHRpb24pO1xuICAgIH0gZWxzZSByZXR1cm5cblxufVxuZXhwb3J0IHtsaW5rUHJvamVjdE5hbWUsIGNvbG9yVGFzaywgcmVtb3ZlQ29sb3JPcHR9IiwiaW1wb3J0IHsgdGFza0NhcmRBcnJheXMgfSBmcm9tIFwiLi9sb2FkQ29uZW50XCI7XG5pbXBvcnQgeyBhcmNoaXZlIH0gZnJvbSBcIi4vZGx0LWFyY2h2XCI7XG5cbmNvbnN0IHRhc2tzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tzLWNvbnRhaW5lcicpO1xuY29uc3QgZmlsdGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmaWx0ZXJcIik7XG5cbmZ1bmN0aW9uIGZpbHRlclRhc2tzICgpIHtcblxuICAgIC8vIENsZWFyIGN1cnJlbnQgY2FyZHNcbiAgICBjb25zdCBjdXJyZW50VGFza0NhcmRzID0gdGFza3NDb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnLnRhc2tDYXJkJyk7XG4gICAgY3VycmVudFRhc2tDYXJkcy5mb3JFYWNoKGRpdiA9PiB7XG4gICAgICAgIHRhc2tzQ29udGFpbmVyLnJlbW92ZUNoaWxkKGRpdilcbiAgICB9KVxuICAgIFxuICAgIFxuICAgIFxuICAgIC8vc29ydCBieSBmaWx0ZXJcbiAgICBzd2l0Y2ggKGZpbHRlci52YWx1ZSkge1xuICAgICAgICBjYXNlIFwib2xkZXN0XCI6XG4gICAgICAgICAgICBhcHBlbmRDaGlsZHModGFza0NhcmRBcnJheXMpO1xuICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICAgIGNhc2UgXCJuZXdlc3RcIjpcbiAgICAgICAgICAgIGNvbnN0IG5ld2VzdEFycmF5ID0gdGFza0NhcmRBcnJheXMuc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgICAgICAgICBhcHBlbmRDaGlsZHMobmV3ZXN0QXJyYXkpO1xuICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiZHVlRGF0ZVwiOlxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGFyZUJ5RGF0ZShhLCBiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0ZUEgPSBuZXcgRGF0ZShhLnF1ZXJ5U2VsZWN0b3IoJy50YXNrRHVlRGF0ZScpLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRlQiA9IG5ldyBEYXRlKGIucXVlcnlTZWxlY3RvcignLnRhc2tEdWVEYXRlJykudGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUEgLSBkYXRlQjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZGF0ZVNvcnRlZEFycmF5ID0gdGFza0NhcmRBcnJheXMuc2xpY2UoKS5zb3J0KGNvbXBhcmVCeURhdGUpO1xuICAgICAgICAgICAgYXBwZW5kQ2hpbGRzKGRhdGVTb3J0ZWRBcnJheSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgIGNhc2UgXCJwcm9qZWN0XCI6XG4gICAgICAgICAgICBmdW5jdGlvbiBjb21wYXJlQnlQcm9qZWN0IChhLGIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdBID0gYS5xdWVyeVNlbGVjdG9yKCcucHJvamVjdE5hbWUnKS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdCID0gYi5xdWVyeVNlbGVjdG9yKCcucHJvamVjdE5hbWUnKS50ZXh0Q29udGVudDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdBLmxvY2FsZUNvbXBhcmUoc3RyaW5nQik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RTb3J0ZWRBcnJheSA9IHRhc2tDYXJkQXJyYXlzLnNsaWNlKCkuc29ydChjb21wYXJlQnlQcm9qZWN0KTtcbiAgICAgICAgICAgIGFwcGVuZENoaWxkcyhwcm9qZWN0U29ydGVkQXJyYXkpO1xuICAgICAgICBicmVhaztcbiAgICB9O1xuICAgIGFyY2hpdmUoKTtcblxufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZHMgKG5hbWVkQXJyYXkpIHtcbiAgICBuYW1lZEFycmF5LmZvckVhY2goZGl2ID0+IHtcbiAgICAgICAgdGFza3NDb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2KVxuICAgIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZpbHRlclRhc2tzIiwiaW1wb3J0IHt0YXNrQ2FyZEFycmF5c30gZnJvbSBcIi4vbG9hZENvbmVudFwiO1xuaW1wb3J0IGZpbHRlclRhc2tzIGZyb20gJy4vZmlsdGVyJztcbmltcG9ydCB7IGNvbG9yVGFzayB9IGZyb20gXCIuL2xpbmstUHJvamVjdFRhc2tcIjtcblxuXG5cblxuY29uc3QgdGFza3NDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFza3MtY29udGFpbmVyJyk7XG5jb25zdCBjaGVja2JveEFyY2hpdmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNoZWNrYm94QXJjaGl2ZVwiKTtcbmNvbnN0IGFyY2hpdmVkVGFza3MgPSBbXVxuXG5mdW5jdGlvbiB0YXNrRG9uZShldmVudCkge1xuICAgIFxuICAgIGNvbnN0IGNsaWNrZWRDYXJkID0gZmluZENhcmRJbkFycmF5KHRhc2tDYXJkQXJyYXlzKSB8fCBmaW5kQ2FyZEluQXJyYXkoYXJjaGl2ZWRUYXNrcyk7XG5cbiAgICBmdW5jdGlvbiBmaW5kQ2FyZEluQXJyYXkoYXJyYXkpIHtcbiAgICAgIHJldHVybiBhcnJheS5maW5kKGNhcmQgPT4gY2FyZC5xdWVyeVNlbGVjdG9yKCcudGFza0NoZWNrYm94JykgPT09IGV2ZW50LnRhcmdldCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGFyY2hpdmVkSW5kZXggPSBhcmNoaXZlZFRhc2tzLmluZGV4T2YoY2xpY2tlZENhcmQpO1xuICAgIGNvbnN0IGNsaWNrZWRDYXJkSW5kZXggPSB0YXNrQ2FyZEFycmF5cy5pbmRleE9mKGNsaWNrZWRDYXJkKTtcblxuICAgXG4gICAgY29uc3QgY2xpY2tlZENhcmRQcm9qZWN0VGl0bGVEaXYgPSBjbGlja2VkQ2FyZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwicHJvamVjdE5hbWVcIik7XG4gICAgY29uc3QgY2xpY2tlZENhcmRQcm9qZWN0VGl0bGUgPSBjbGlja2VkQ2FyZFByb2plY3RUaXRsZURpdlswXS50ZXh0Q29udGVudDtcblxuICAgIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgICBpZiAoIWFyY2hpdmVkVGFza3MuaW5jbHVkZXMoY2xpY2tlZENhcmQpKSB7XG4gICAgICAgICAgYXJjaGl2ZWRUYXNrcy5wdXNoKGNsaWNrZWRDYXJkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGlja2VkQ2FyZEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHRhc2tDYXJkQXJyYXlzLnNwbGljZShjbGlja2VkQ2FyZEluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY2xpY2tlZENhcmQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGFza0NoZWNrYm94JylbMF0udmFsdWUgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmxvZyggY2xpY2tlZENhcmQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGFza0NoZWNrYm94JylbMF0pXG4gICAgXG4gICAgICAgIGNsaWNrZWRDYXJkLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICBcInJnYigxNTMsIDEwNSwgMTA1KVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXRhc2tDYXJkQXJyYXlzLmluY2x1ZGVzKGNsaWNrZWRDYXJkKSkge1xuICAgICAgICAgICAgdGFza0NhcmRBcnJheXMucHVzaChjbGlja2VkQ2FyZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXJjaGl2ZWRJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGFyY2hpdmVkVGFza3Muc3BsaWNlKGFyY2hpdmVkSW5kZXgsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xpY2tlZENhcmQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3JUYXNrKGNsaWNrZWRDYXJkUHJvamVjdFRpdGxlKTtcbiAgICAgICAgaWYgKCFjb2xvclRhc2soY2xpY2tlZENhcmRQcm9qZWN0VGl0bGUpKSB7XG4gICAgICAgICAgICBjbGlja2VkQ2FyZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImJsdWVcIlxuICAgICAgICB9IFxuXG4gICAgICAgIGNsaWNrZWRDYXJkLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rhc2tDaGVja2JveCcpWzBdLnZhbHVlID0gbnVsbDtcbiAgICB9O1xuXG4gICAgY29uc29sZS5sb2coYXJjaGl2ZWRUYXNrcylcblxuICAgIGZpbHRlclRhc2tzKCk7XG4gICAgYXJjaGl2ZSgpO1xufVxuICBcbmZ1bmN0aW9uIGFyY2hpdmUgKCl7XG4gICAgaWYgKGNoZWNrYm94QXJjaGl2ZS5jaGVja2VkKSB7XG4gICAgICAgIGFyY2hpdmVkVGFza3MuZm9yRWFjaChkaXYgPT4ge1xuICAgICAgICAgICAgdGFza3NDb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2KVxuICAgICAgICB9KTsgXG4gICAgfSBlbHNlIHsgXG4gICAgICAgIGFyY2hpdmVkVGFza3MuZm9yRWFjaChkaXYgPT4ge1xuICAgICAgICAgICAgdGFza3NDb250YWluZXIuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgICAgIHRhc2tzQ29udGFpbmVyLnJlbW92ZUNoaWxkKGRpdik7XG4gICAgICAgIH0pXG4gICAgfTtcbn07XG5cblxuZnVuY3Rpb24gZGVsZXRlVGFzayAoZXZlbnQpIHtcbiAgICBcbiAgICBjb25zdCBjbGlja2VkQ2FyZCA9IGZpbmRDYXJkSW5BcnJheSh0YXNrQ2FyZEFycmF5cykgfHwgZmluZENhcmRJbkFycmF5KGFyY2hpdmVkVGFza3MpO1xuXG4gICAgZnVuY3Rpb24gZmluZENhcmRJbkFycmF5KGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkuZmluZChjYXJkID0+IGNhcmQucXVlcnlTZWxlY3RvcignLnRhc2tSZW1vdmVCdG4nKSA9PT0gZXZlbnQudGFyZ2V0KTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgY2xpY2tlZENhcmRJbmRleCA9IHRhc2tDYXJkQXJyYXlzLmluZGV4T2YoY2xpY2tlZENhcmQpO1xuICAgIGNvbnN0IGFyY2hpdmVkSW5kZXggPSBhcmNoaXZlZFRhc2tzLmluZGV4T2YoY2xpY2tlZENhcmQpO1xuXG5cblxuICAgIGlmIChjbGlja2VkQ2FyZEluZGV4ICE9PSAtMSkge1xuICAgICAgICB0YXNrQ2FyZEFycmF5cy5zcGxpY2UoY2xpY2tlZENhcmRJbmRleCwgMSk7XG4gICAgfTtcblxuICAgIGlmIChhcmNoaXZlZEluZGV4ICE9PSAtMSkge1xuICAgICAgICBhcmNoaXZlZFRhc2tzLnNwbGljZShhcmNoaXZlZEluZGV4LCAxKTtcbiAgICB9O1xuXG4gICAgZmlsdGVyVGFza3MoKTtcbn1cblxuZXhwb3J0IHt0YXNrRG9uZSwgYXJjaGl2ZSwgZGVsZXRlVGFzaywgYXJjaGl2ZWRUYXNrc30iLCJpbXBvcnQgeyBjb2xvclRhc2sgfSBmcm9tIFwiLi9saW5rLVByb2plY3RUYXNrXCI7XG5pbXBvcnQge3Rhc2tBcnJheX0gZnJvbSBcIi4vb2JqZWN0Q29udHJ1Y3RvclwiO1xuaW1wb3J0IHtjb3VudERheXMsIHRhc2tDYXJkQXJyYXlzfSBmcm9tIFwiLi9sb2FkQ29uZW50XCI7XG5pbXBvcnQge2FyY2hpdmVkVGFza3MsIGFyY2hpdmV9IGZyb20gXCIuL2RsdC1hcmNodlwiXG5pbXBvcnQgZmlsdGVyVGFza3MgZnJvbSBcIi4vZmlsdGVyXCI7XG5cbmNvbnN0IHRhc2tFZGl0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tFZGl0Jyk7XG5jb25zdCBjbG9zZU1vZGlmeVRhc2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2xvc2VNb2RpZnlUYXNrJyk7XG5jb25zdCBjbGlja2VkQ2FyZHMgPSB7fTtcbmNvbnN0IGNsaWNrZWRPYmpzID0ge31cbmxldCBjb3VudGVyID0gMTtcblxuZnVuY3Rpb24gZWRpdFRhc2soYWNjZXNzVGFzaykge1xuICAgIGNvbnNvbGUubG9nKGFyY2hpdmVkVGFza3MpO1xuICAgIGNvbnNvbGUubG9nKHRhc2tDYXJkQXJyYXlzKTtcbiAgICB0YXNrRWRpdC5zaG93TW9kYWwoKTtcblxuICAgIGNvbnN0IHRhc2tNb2RpZnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGFza01vZGlmeScpO1xuICAgIGNvbnN0IGVkaXRUYXNrVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdFRhc2tUaXRsZScpO1xuICAgIGNvbnN0IGVkaXRUYXNrRGVzY3JpcHRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWRpdFRhc2tEZXNjcmlwdGlvbicpO1xuICAgIGNvbnN0IGVkaXRUYXNrRHVlRGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZGl0VGFza0R1ZURhdGUnKTtcbiAgICBjb25zdCBtb2RpZnlQcm9qZWN0TGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RpZnlQcm9qZWN0TGlzdCcpO1xuICAgIGNvbnN0IG1vZGlmeUNoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb2RpZnlDaGVja2JveFwiKTtcbiAgICBcbiAgICBlZGl0VGFza1RpdGxlLnZhbHVlID0gYWNjZXNzVGFzay5uZXdUYXNrT2JqLnRpdGxlO1xuICAgIGVkaXRUYXNrRGVzY3JpcHRpb24udmFsdWUgPSBhY2Nlc3NUYXNrLm5ld1Rhc2tPYmouZGVzY3JpcHRpb247XG4gICAgZWRpdFRhc2tEdWVEYXRlLnZhbHVlID0gYWNjZXNzVGFzay5uZXdUYXNrT2JqLmR1ZURhdGU7XG4gICAgbW9kaWZ5UHJvamVjdExpc3QudmFsdWUgPSBhY2Nlc3NUYXNrLm5ld1Rhc2tPYmoucHJvamVjdFRpdGxlO1xuICAgIFxuXG4gICAgY29uc3QgY2xpY2tlZE9iaiA9IGBjbGlja2VkT2JqJHtjb3VudGVyfWA7XG4gICAgY29uc3QgY2xpY2tlZE9ialZhbHVlID0gdGFza0FycmF5LmZpbmQob2JqID0+IG9iai50aXRsZSA9PT0gZWRpdFRhc2tUaXRsZS52YWx1ZSAmJiBvYmouZGVzY3JpcHRpb24gPT09IGVkaXRUYXNrRGVzY3JpcHRpb24udmFsdWUgJiYgb2JqLmR1ZURhdGUgPT09IGVkaXRUYXNrRHVlRGF0ZS52YWx1ZSk7XG4gICAgXG4gICAgY2xpY2tlZE9ianNbY2xpY2tlZE9ial0gPSBjbGlja2VkT2JqVmFsdWVcbiAgICBcbiAgICBjb25zdCBjbGlja2VkQ2FyZCA9IGBjbGlja2VkQ2FyZCR7Y291bnRlcn1gO1xuICAgIGNvbnN0IGNsaWNrZWRDYXJkVmFsdWUgPSBmaW5kQ2FyZEluQXJyYXkodGFza0NhcmRBcnJheXMpIHx8IGZpbmRDYXJkSW5BcnJheShhcmNoaXZlZFRhc2tzKTtcbiAgICBcblxuICAgIGZ1bmN0aW9uIGZpbmRDYXJkSW5BcnJheShhcnJheSkge1xuICAgICAgICByZXR1cm4gYXJyYXkuZmluZChjYXJkID0+IGNhcmQucXVlcnlTZWxlY3RvcignLnByb2plY3ROYW1lJykudGV4dENvbnRlbnQgPT09IG1vZGlmeVByb2plY3RMaXN0LnZhbHVlICYmIGNhcmQucXVlcnlTZWxlY3RvcignLnRhc2tUaXRsZScpLnRleHRDb250ZW50ID09PSBlZGl0VGFza1RpdGxlLnZhbHVlICYmIGNhcmQucXVlcnlTZWxlY3RvcignLnRhc2tEdWVEYXRlJykudGV4dENvbnRlbnQgPT09IGVkaXRUYXNrRHVlRGF0ZS52YWx1ZSk7XG4gICAgfVxuXG4gICAgY2xpY2tlZENhcmRzW2NsaWNrZWRDYXJkXSA9IGNsaWNrZWRDYXJkVmFsdWU7XG5cbiAgICBpZiAoY2xpY2tlZENhcmRzW2NsaWNrZWRDYXJkXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0YXNrQ2hlY2tib3gnKVswXS52YWx1ZSkge1xuICAgICAgICBtb2RpZnlDaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICB9ZWxzZSB7XG4gICAgICAgIG1vZGlmeUNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICB9XG5cblxuICAgIGNsb3NlTW9kaWZ5VGFzay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGFza0VkaXQuY2xvc2UoKTsgIFxuICAgIH0pO1xuXG4gICAgdGFza01vZGlmeS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblxuICAgICAgICBjbGlja2VkT2Jqc1tjbGlja2VkT2JqXS50aXRsZSA9IGVkaXRUYXNrVGl0bGUudmFsdWU7XG4gICAgICAgIGNsaWNrZWRPYmpzW2NsaWNrZWRPYmpdLmRlc2NyaXB0aW9uID0gZWRpdFRhc2tEZXNjcmlwdGlvbi52YWx1ZTtcbiAgICAgICAgY2xpY2tlZE9ianNbY2xpY2tlZE9ial0uZHVlRGF0ZSA9IGVkaXRUYXNrRHVlRGF0ZS52YWx1ZTtcbiAgICAgICAgY2xpY2tlZE9ianNbY2xpY2tlZE9ial0ucHJvamVjdFRpdGxlID0gbW9kaWZ5UHJvamVjdExpc3QudmFsdWU7XG4gICAgICAgIFxuICAgICAgICAvL2NvbnNvbGUubG9nKGFyY2hpdmVkVGFza3MpXG5cbiAgICAgICAgY29uc3QgY2xpY2tlZENhcmRJbmRleCA9IHRhc2tDYXJkQXJyYXlzLmluZGV4T2YoY2xpY2tlZENhcmRzW2NsaWNrZWRDYXJkXSk7XG4gICAgICAgIGNvbnN0IGFyY2hpdmVkSW5kZXggPSBhcmNoaXZlZFRhc2tzLmluZGV4T2YoY2xpY2tlZENhcmRzW2NsaWNrZWRDYXJkXSk7XG4gICAgXG4gICAgXG4gICAgICAgIGlmIChjbGlja2VkQ2FyZEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgY2xpY2tlZENhcmRzW2NsaWNrZWRDYXJkXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwcm9qZWN0TmFtZScpWzBdLnRleHRDb250ZW50ID0gbW9kaWZ5UHJvamVjdExpc3QudmFsdWU7XG4gICAgICAgICAgICBjb3VudERheXMoY2xpY2tlZENhcmRzW2NsaWNrZWRDYXJkXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdkYXlDb3VudCcpWzBdLCBhY2Nlc3NUYXNrKTtcbiAgICAgICAgICAgIGNsaWNrZWRDYXJkc1tjbGlja2VkQ2FyZF0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGFza1RpdGxlJylbMF0udGV4dENvbnRlbnQgPSBlZGl0VGFza1RpdGxlLnZhbHVlO1xuICAgICAgICAgICAgY2xpY2tlZENhcmRzW2NsaWNrZWRDYXJkXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0YXNrRHVlRGF0ZScpWzBdLnRleHRDb250ZW50ID0gZWRpdFRhc2tEdWVEYXRlLnZhbHVlO1xuICAgICAgICAgICAgY2xpY2tlZENhcmRzW2NsaWNrZWRDYXJkXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0YXNrQ2hlY2tib3gnKVswXS5jaGVja2VkID0gbW9kaWZ5Q2hlY2tib3guY2hlY2tlZDtcbiAgICAgICAgICAgIGNsaWNrZWRDYXJkc1tjbGlja2VkQ2FyZF0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3JUYXNrKGNsaWNrZWRPYmpzW2NsaWNrZWRPYmpdLnByb2plY3RUaXRsZSk7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHRhc2tDYXJkQXJyYXlzW2NsaWNrZWRDYXJkSW5kZXhdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Byb2plY3ROYW1lJylbMF0pXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8vaWYgKGFyY2hpdmVkSW5kZXggIT09IC0xKSB7XG4gICAgICAgIC8vICAgIGFyY2hpdmVkVGFza3Muc3BsaWNlKGFyY2hpdmVkSW5kZXgsIDEpO1xuICAgICAgICAvL307XG4gICAgXG4gICAgICAgIFxuICAgICAgICB0YXNrRWRpdC5jbG9zZSgpO1xuICAgICAgICBpZiAobW9kaWZ5Q2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgICAgICAgaWYgKCFhcmNoaXZlZFRhc2tzLmluY2x1ZGVzKGNsaWNrZWRDYXJkc1tjbGlja2VkQ2FyZF0pKSB7XG4gICAgICAgICAgICAgICAgYXJjaGl2ZWRUYXNrcy5wdXNoKGNsaWNrZWRDYXJkc1tjbGlja2VkQ2FyZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIGlmIChjbGlja2VkQ2FyZEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICB0YXNrQ2FyZEFycmF5cy5zcGxpY2UoY2xpY2tlZENhcmRJbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNsaWNrZWRDYXJkc1tjbGlja2VkQ2FyZF0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndGFza0NoZWNrYm94JylbMF0udmFsdWUgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgY2xpY2tlZENhcmRzW2NsaWNrZWRDYXJkXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAgXCJyZ2IoMTUzLCAxMDUsIDEwNSlcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGFza0NhcmRBcnJheXMuaW5jbHVkZXMoY2xpY2tlZENhcmRzW2NsaWNrZWRDYXJkXSkpIHtcbiAgICAgICAgICAgICAgICB0YXNrQ2FyZEFycmF5cy5wdXNoKGNsaWNrZWRDYXJkc1tjbGlja2VkQ2FyZF0pO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKGFyY2hpdmVkSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgYXJjaGl2ZWRUYXNrcy5zcGxpY2UoYXJjaGl2ZWRJbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBjbGlja2VkQ2FyZHNbY2xpY2tlZENhcmRdLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yVGFzayhjbGlja2VkQ2FyZHNbY2xpY2tlZENhcmRdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Byb2plY3ROYW1lJylbMF0udGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgXG4gICAgXG4gICAgICAgICAgICBjbGlja2VkQ2FyZHNbY2xpY2tlZENhcmRdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3Rhc2tDaGVja2JveCcpWzBdLnZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhhcmNoaXZlZFRhc2tzKVxuICAgIFxuICAgICAgICBmaWx0ZXJUYXNrcygpO1xuICAgICAgICBhcmNoaXZlKCk7XG4gICAgfSk7XG59O1xuXG5cblxuXG4gIFxuXG5cblxuZXhwb3J0IHtlZGl0VGFza30iLCJpbXBvcnQge2FkZFRhc2ssIGFkZFByb2plY3R9IGZyb20gJy4vb2JqZWN0Q29udHJ1Y3Rvcic7XG5pbXBvcnQge2xpbmtQcm9qZWN0TmFtZSwgY29sb3JUYXNrfSBmcm9tIFwiLi9saW5rLVByb2plY3RUYXNrXCI7XG5pbXBvcnQgeyB0YXNrRG9uZSxkZWxldGVUYXNrIH0gZnJvbSAnLi9kbHQtYXJjaHYnO1xuaW1wb3J0IGZpbHRlclRhc2tzIGZyb20gJy4vZmlsdGVyJztcbmltcG9ydCB7IGVkaXRUYXNrfSBmcm9tICcuL2VkaXQnO1xuXG5cblxuY29uc3QgdGFza0NhcmRBcnJheXMgPSBbXTtcbi8vIGFkZGluZyBUYXNrIGNvbnRlbnRcblxuZnVuY3Rpb24gbG9hZFRhc2sodGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcm9qZWN0VGl0bGUpIHtcbiAgIFxuICAgIGxldCBhY2Nlc3NUYXNrID0gYWRkVGFzayh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByb2plY3RUaXRsZSk7XG5cbiAgICBjb25zdCB0YXNrQ2FyZCA9IGNyZWF0ZU5hbWVkRGl2KFwidGFza0NhcmRcIik7XG5cbiAgICB0YXNrQ2FyZC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvclRhc2socHJvamVjdFRpdGxlKTtcblxuICAgIGNvbnN0IHRvcERldGFpbHNDYXJkID0gY3JlYXRlTmFtZWREaXYoJ3RvcERldGFpbHNDYXJkJyk7XG4gICAgICAgIHRvcERldGFpbHNDYXJkLmFwcGVuZENoaWxkKGNyZWF0ZUluZm9EaXYoJ3Byb2plY3ROYW1lJywgYWNjZXNzVGFzay5uZXdUYXNrT2JqLnByb2plY3RUaXRsZSkpO1xuXG4gICAgICAgIGNvbnN0IGRheUNvdW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRheUNvdW50LmNsYXNzTGlzdC5hZGQoXCJkYXlDb3VudFwiKVxuICAgICAgICBjb3VudERheXMoZGF5Q291bnQsIGFjY2Vzc1Rhc2spO1xuICAgICAgICB0b3BEZXRhaWxzQ2FyZC5hcHBlbmRDaGlsZChkYXlDb3VudCk7XG5cbiAgICB0YXNrQ2FyZC5hcHBlbmRDaGlsZCh0b3BEZXRhaWxzQ2FyZCk7XG5cblxuICAgIGNvbnN0IGJvdHRvbUNhcmQgPSBjcmVhdGVOYW1lZERpdihcImJvdHRvbUNhcmRcIik7XG4gICAgXG4gICAgICAgIGNvbnN0IGNlbnRlckluZm8gPSBjcmVhdGVOYW1lZERpdihcImNlbnRlckluZm9cIik7XG5cbiAgICAgICAgICAgIGNlbnRlckluZm8uYXBwZW5kQ2hpbGQoY3JlYXRlSW5mb0RpdihcInRhc2tUaXRsZVwiLCBhY2Nlc3NUYXNrLm5ld1Rhc2tPYmoudGl0bGUpKTtcbiAgICAgICAgICAgIC8vY2VudGVySW5mby5hcHBlbmRDaGlsZChjcmVhdGVJbmZvRGl2KFwidGFza0Rlc2NyaXB0aW9uXCIsIGFjY2Vzc1Rhc2submV3VGFza09iai5kZXNjcmlwdGlvbikpO1xuXG4gICAgICAgICAgICBjZW50ZXJJbmZvLmFwcGVuZENoaWxkKGNyZWF0ZUluZm9EaXYoXCJ0YXNrRHVlRGF0ZVwiLCBhY2Nlc3NUYXNrLm5ld1Rhc2tPYmouZHVlRGF0ZSkpO1xuXG4gICAgICAgIGNvbnN0IHJpZ2h0U2lkZSA9IGNyZWF0ZU5hbWVkRGl2KFwicmlnaHRTaWRlXCIpO1xuXG4gICAgICAgICAgICBjb25zdCB0YXNrQ2hlY2tib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgICAgICAgICB0YXNrQ2hlY2tib3gudHlwZSA9IFwiY2hlY2tib3hcIjtcbiAgICAgICAgICAgIHRhc2tDaGVja2JveC5jbGFzc0xpc3QuYWRkKFwidGFza0NoZWNrYm94XCIpO1xuICAgICAgICAgICAgdGFza0NoZWNrYm94LnZhbHVlID0gbnVsbDtcblxuICAgICAgICAgICAgdGFza0NoZWNrYm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGFza0RvbmUoZXZlbnQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgb3BlblRhc2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIG9wZW5UYXNrLnRleHRDb250ZW50ID0gXCLihpfvuI9cIjtcbiAgICAgICAgICAgIG9wZW5UYXNrLmNsYXNzTGlzdC5hZGQoXCJvcGVuVGFza1wiKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBvcGVuVGFzay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdFRhc2soYWNjZXNzVGFzayk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICByaWdodFNpZGUuYXBwZW5kQ2hpbGQodGFza0NoZWNrYm94KSAgICBcbiAgICAgICAgICAgIHJpZ2h0U2lkZS5hcHBlbmRDaGlsZChjcmVhdGVJbmZvRGl2KFwidGFza1JlbW92ZUJ0blwiLCBcIvCfl5HvuI9cIiApKTtcbiAgICAgICAgICAgIHJpZ2h0U2lkZS5hcHBlbmRDaGlsZChvcGVuVGFzaylcblxuICAgIFxuICAgIC8vYXBwZW5kaW5nIGFsbCB0aGUgZGl2cyBjcmVhdGVkXG4gICAgYm90dG9tQ2FyZC5hcHBlbmQoY2VudGVySW5mbyk7XG4gICAgYm90dG9tQ2FyZC5hcHBlbmQocmlnaHRTaWRlKTtcbiAgICBcbiAgICB0YXNrQ2FyZC5hcHBlbmRDaGlsZChib3R0b21DYXJkKTtcblxuICAgIHRhc2tDYXJkQXJyYXlzLnB1c2godGFza0NhcmQpO1xuXG4gICAgXG5cbiAgICBcblxuICAgIGZpbHRlclRhc2tzKCk7XG4gICAgXG59XG5cbi8vIGFkZGluZyBwcm9qZWN0IGNvbnRlbnQgXG5jb25zdCBwcm9qZWN0c0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaWRlYmFyJyk7XG5cbmZ1bmN0aW9uIGxvYWRQcm9qZWN0ICh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIGNvbG9yKSB7XG4gICAgbGV0IGFjY2Vzc1Byb2plY3QgPSBhZGRQcm9qZWN0KHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgY29sb3IpO1xuXG4gICAgY29uc3QgcHJvamVjdEl0ZW0gPSBjcmVhdGVOYW1lZERpdihcInByb2plY3RJdGVtXCIpO1xuXG4gICAgICAgIHByb2plY3RJdGVtLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuXG4gICAgICAgIC8vY2hhbmdlIGNvbG9yIHRvIHdoaXRlIGlmIGJsYWNrIGlzIGJhY2tncm91bmRDb2xvclxuXG4gICAgICAgIHByb2plY3RJdGVtLmFwcGVuZENoaWxkKGNyZWF0ZUluZm9EaXYoXCJwcm9qZWN0VGl0bGVcIiwgYWNjZXNzUHJvamVjdC5uZXdQcm9qZWN0T2JqLnRpdGxlKSk7XG5cbiAgICAgICAgcHJvamVjdEl0ZW0uYXBwZW5kQ2hpbGQoY3JlYXRlSW5mb0RpdigncHJvamVjdER1ZURhdGUnLCBhY2Nlc3NQcm9qZWN0Lm5ld1Byb2plY3RPYmouZHVlRGF0ZSkpO1xuXG4gICAgICAgIGxpbmtQcm9qZWN0TmFtZSh0aXRsZSk7XG4gICAgICAgIFxuXG4gICAgcHJvamVjdHNDb250YWluZXIuYXBwZW5kQ2hpbGQocHJvamVjdEl0ZW0pO1xufVxuXG5cblxuLy8gcXVpY2sgY3JlYXRlSW5mb0RpdiBcbmZ1bmN0aW9uIGNyZWF0ZUluZm9EaXYgKGNzc0NsYXNzLCB0ZXh0KSB7XG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoY3NzQ2xhc3MpO1xuICAgIGRpdi50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICAgIGlmIChjc3NDbGFzcyA9PT0gXCJ0YXNrUmVtb3ZlQnRuXCIpe1xuICAgICAgICAgICAgZGl2LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICBkZWxldGVUYXNrKGV2ZW50KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgcmV0dXJuIGRpdlxufVxuXG4vLyBxdWljayBjcmVhdGVOYW1lZERpdlxuZnVuY3Rpb24gY3JlYXRlTmFtZWREaXYgKG5hbWUpIHtcbiAgICBjb25zdCBkaXZzT2JqZWN0cyA9IHt9O1xuICAgIGRpdnNPYmplY3RzW25hbWVdID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2c09iamVjdHNbbmFtZV0uY2xhc3NMaXN0LmFkZChuYW1lKTtcbiAgICByZXR1cm4gZGl2c09iamVjdHNbbmFtZV1cbn1cblxuXG5cbmZ1bmN0aW9uIGNvdW50RGF5cyAoZGl2LCBhY2Nlc3NUYXNrKSB7XG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IG9iakRhdGUgPSBuZXcgRGF0ZSAoYWNjZXNzVGFzay5uZXdUYXNrT2JqLmR1ZURhdGUpO1xuICAgIGRpdi50ZXh0Q29udGVudCA9IGAgRHVlIGluOiAkeyBNYXRoLmNlaWwoKCBvYmpEYXRlIC0gdG9kYXkpLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpfSBkYXlzYDtcblxuICAgIGlmICgob2JqRGF0ZSAtIHRvZGF5KSA8IDApIHtcbiAgICAgICAgZGl2LnN0eWxlLmNvbG9yID0gXCJyZWRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkaXYuc3R5bGUuY29sb3IgPSAnYmxhY2snO1xuICAgIH1cbn1cblxuXG5leHBvcnQge2xvYWRUYXNrLCBsb2FkUHJvamVjdCwgdGFza0NhcmRBcnJheXMsIGNvdW50RGF5cyB9XG4vLyIsIi8vaW1wb3J0IGFkZFRhc2sgZnJvbSAnLi9vYmplY3RDb250cnVjdG9yJ1xuaW1wb3J0IHtsb2FkVGFzayAsIGxvYWRQcm9qZWN0fSBmcm9tIFwiLi9sb2FkQ29uZW50XCI7XG5pbXBvcnQgeyBwcm9qZWN0QXJyYXkgfSBmcm9tIFwiLi9vYmplY3RDb250cnVjdG9yXCI7XG5pbXBvcnQgeyByZW1vdmVDb2xvck9wdCB9IGZyb20gXCIuL2xpbmstUHJvamVjdFRhc2tcIjtcbi8vIHJlZmVyZW5jZSB0byBkaWFsb2dzXG5jb25zdCB0YXNrRGlhbG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tEaWFsb2cnKTtcbmNvbnN0IHByb2plY3REaWFsb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdERpYWxvZycpO1xuXG5cbi8vIHN0b3JpbmcgVGFzayBmdW5jdGlvblxuZnVuY3Rpb24gc3RvcmVUYXNrICgpIHtcbiAgICBjb25zdCB0YXNrVGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFza1RpdGxlJyk7XG4gICAgY29uc3QgdGFza0Rlc2NyaXB0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tEZXNjcmlwdGlvbicpO1xuICAgIGNvbnN0IHRhc2tEdWVEYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tEdWVEYXRlJyk7XG5cbiAgICBjb25zdCBwcm9qZWN0TGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvamVjdExpc3RcIik7XG4gICAgY29uc3Qgc2VsZWN0ZWRQcm9qZWN0ID0gcHJvamVjdExpc3Qub3B0aW9uc1twcm9qZWN0TGlzdC5zZWxlY3RlZEluZGV4XTtcblxuICAgIHRhc2tUaXRsZS5mb2N1cygpO1xuXG4gICAgaWYgKCF0YXNrVGl0bGUuY2hlY2tWYWxpZGl0eSgpIHx8ICF0YXNrRGVzY3JpcHRpb24uY2hlY2tWYWxpZGl0eSgpIHx8ICF0YXNrRHVlRGF0ZS5jaGVja1ZhbGlkaXR5KCkgfHwgL15cXHMqJC8udGVzdCh0YXNrVGl0bGUudmFsdWUpIHx8IC9eXFxzKiQvLnRlc3QodGFza0Rlc2NyaXB0aW9uLnZhbHVlKSkge1xuICAgICAgICBhbGVydChcIlBsZWFzZSBmaWxsIHRoZSBpbnB1dHMuIFRoZSB0aXRsZSBjYW4ndCBleGNlZWQgMTAgY2hhcmFjaHRlcnMuIFRoZSBkZXNjcmlwdGlvbiBjYW4ndCBleGNlZWQgMzAgY2hhcmFjaHRlcnNcIik7XG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCB0aXRsZSA9IHRhc2tUaXRsZS52YWx1ZTtcbiAgICBsZXQgZGVzY3JpcHRpb24gPSB0YXNrRGVzY3JpcHRpb24udmFsdWU7XG4gICAgbGV0IGR1ZURhdGUgPSB0YXNrRHVlRGF0ZS52YWx1ZTtcbiAgICBsZXQgcHJvamVjdFRpdGxlID0gc2VsZWN0ZWRQcm9qZWN0LnZhbHVlXG4gICAgXG4gICBcblxuICAgIHRhc2tEaWFsb2cuY2xvc2UoKTtcbiAgICBsb2FkVGFzayh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByb2plY3RUaXRsZSk7XG5cbiAgICB0YXNrVGl0bGUudmFsdWUgPSAnJztcbiAgICB0YXNrRGVzY3JpcHRpb24udmFsdWUgPSAnJztcbiAgICB0YXNrRHVlRGF0ZS52YWx1ZSA9ICcnO1xufVxuXG4vLyBzdG9yaW5nIHByb2plY3QgZnVuY3Rpb25cbmZ1bmN0aW9uIHN0b3JlUHJvamVjdCAoKSB7XG4gICAgY29uc3QgcHJvamVjdFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3RUaXRsZScpO1xuICAgIGNvbnN0IHByb2plY3REZXNjcmlwdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0RGVzY3JpcHRpb24nKTtcbiAgICBjb25zdCBwcm9qZWN0RHVlRGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0RHVlRGF0ZScpO1xuICAgIGNvbnN0IHByb2plY3RDb2xvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0Q29sb3InKTtcblxuICAgIGlmICghcHJvamVjdFRpdGxlLmNoZWNrVmFsaWRpdHkoKSB8fCAhcHJvamVjdERlc2NyaXB0aW9uLmNoZWNrVmFsaWRpdHkoKSB8fCAhcHJvamVjdER1ZURhdGUuY2hlY2tWYWxpZGl0eSgpIHx8IC9eXFxzKiQvLnRlc3QocHJvamVjdFRpdGxlLnZhbHVlKSB8fCAvXlxccyokLy50ZXN0KHByb2plY3REZXNjcmlwdGlvbi52YWx1ZSkpIHtcbiAgICAgICAgYWxlcnQoXCJQbGVhc2UgZmlsbCB0aGUgaW5wdXRzLiBUaGUgdGl0bGUgY2FuJ3QgZXhjZWVkIDEwIGNoYXJhY2h0ZXJzLiBUaGUgZGVzY3JpcHRpb24gY2FuJ3QgZXhjZWVkIDMwIGNoYXJhY2h0ZXJzXCIpO1xuICAgICAgICByZXR1cm5cbiAgICB9XG5cblxuICAgIGxldCB0aXRsZSA9IHByb2plY3RUaXRsZS52YWx1ZTtcbiAgICBsZXQgZGVzY3JpcHRpb24gPSBwcm9qZWN0RGVzY3JpcHRpb24udmFsdWU7XG4gICAgbGV0IGR1ZURhdGUgPSBwcm9qZWN0RHVlRGF0ZS52YWx1ZTtcbiAgICBsZXQgY29sb3IgPSBwcm9qZWN0Q29sb3IudmFsdWU7XG4gICAgXG4gICAgXG4gICAgXG4gICAgY29uc3QgZG91YmxlTmFtZUNoZWNrID0gcHJvamVjdEFycmF5LmZpbmQob2JqID0+IG9iai50aXRsZSA9PT0gdGl0bGUpO1xuXG4gICAgaWYgKGRvdWJsZU5hbWVDaGVjaykge1xuICAgICAgICBhbGVydChcImNhbid0IHVzZSBzYW1lIHByb2plY3QgbmFtZVwiKTtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIFxuICAgIGlmIChyZW1vdmVDb2xvck9wdChjb2xvcikpIHtcbiAgICAgICAgYWxlcnQoXCJNYXggYW1vdW50IG9mIHByb2plY3RzIHJlYWNoZWRcIilcbiAgICAgICAgcmV0dXJuXG4gICAgfTtcblxuICAgIHByb2plY3REaWFsb2cuY2xvc2UoKTtcblxuICAgIGxvYWRQcm9qZWN0KHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgY29sb3IpO1xuXG4gICAgcHJvamVjdFRpdGxlLnZhbHVlID0gJyc7XG4gICAgcHJvamVjdERlc2NyaXB0aW9uLnZhbHVlID0gJyc7XG4gICAgcHJvamVjdER1ZURhdGUudmFsdWUgPSAnJztcbn1cblxuZXhwb3J0IHtzdG9yZVRhc2ssIHN0b3JlUHJvamVjdH0iLCJpbXBvcnQgJy4uL2Rpc3Qvc3R5bGUuY3NzJ1xuaW1wb3J0ICB7c3RvcmVUYXNrLCBzdG9yZVByb2plY3QgfSBmcm9tICcuL3N0b3JlTW9kYWxzJ1xuaW1wb3J0IGZpbHRlclRhc2tzIGZyb20gJy4vZmlsdGVyJztcbmltcG9ydCB7YXJjaGl2ZX0gZnJvbSAnLi9kbHQtYXJjaHYnO1xuXG5cbi8vZm9jdXMgZGl2c1xuY29uc3QgdGFza1RpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tUaXRsZScpO1xuY29uc3QgcHJvamVjdFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb2plY3RUaXRsZScpO1xuXG5cbi8vIHRhc2tidG5cbmNvbnN0IHRhc2tCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFza0J0bicpO1xuY29uc3QgdGFza0RpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrRGlhbG9nJyk7XG50YXNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIHRhc2tEaWFsb2cuc2hvd01vZGFsKCk7XG4gICAgdGFza1RpdGxlLmZvY3VzKClcbn0pO1xuXG5cbi8vIHByb2plY3RCdG5cbmNvbnN0IHByb2plY3RCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdEJ0bicpO1xuY29uc3QgcHJvamVjdERpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0RGlhbG9nJyk7XG5wcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIHByb2plY3REaWFsb2cuc2hvd01vZGFsKCk7XG4gICAgcHJvamVjdFRpdGxlLmZvY3VzKCk7XG59KTtcblxuXG5cbi8vIGNvbmZpcm0gZnVuY3Rpb25zXG5jb25zdCB0YXNrQ29uZmlybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YXNrQ29uZmlybScpO1xudGFza0NvbmZpcm0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBzdG9yZVRhc2soKTtcbn0pO1xuXG5jb25zdCBwcm9qZWN0Q29uZmlybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0Q29uZmlybScpO1xucHJvamVjdENvbmZpcm0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBzdG9yZVByb2plY3QoKTtcbn0pO1xuXG5cbi8vIGNsb3NlQnRuXG5jb25zdCBjbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jbG9zZS1idG4nKTtcbmNsb3NlQnRuLmZvckVhY2goKGJ0bikgPT4ge1xuICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRhc2tEaWFsb2cuY2xvc2UoKTtcbiAgICBwcm9qZWN0RGlhbG9nLmNsb3NlKCk7XG4gICAgfSk7XG59KTtcblxuXG4vLyBmaWx0ZXIgbGlzdGVuZXIgXG5jb25zdCBmaWx0ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZpbHRlclwiKTtcbmZpbHRlci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgZmlsdGVyVGFza3MoKVxufSk7XG5cbmNvbnN0IGNoZWNrYm94QXJjaGl2ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hlY2tib3hBcmNoaXZlXCIpO1xuY2hlY2tib3hBcmNoaXZlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGFyY2hpdmUoKTtcbn0pO1xuXG5cblxuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImxvY2FscyIsInByb2plY3RBcnJheSIsInRhc2tBcnJheSIsIlRhc2siLCJjb25zdHJ1Y3RvciIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJkdWVEYXRlIiwicHJvamVjdFRpdGxlIiwiUHJvamVjdCIsImNvbG9yIiwic3VwZXIiLCJwcm9qZWN0TGlzdCIsImdldEVsZW1lbnRCeUlkIiwicHJvamVjdENvbG9yIiwibW9kaWZ5UHJvamVjdExpc3QiLCJlbGVtZW50Q291bnQiLCJjb2xvclRhc2siLCJtYXRjaGluZ09iaiIsImZpbmQiLCJyZW1vdmVDb2xvck9wdCIsImNob3Nlbk9wdGlvbiIsIkFycmF5IiwiZnJvbSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwib3B0aW9uIiwidmFsdWUiLCJjb250YWlucyIsImNoaWxkRWxlbWVudENvdW50IiwidGFza3NDb250YWluZXIiLCJmaWx0ZXIiLCJhcHBlbmRDaGlsZHMiLCJuYW1lZEFycmF5IiwiZm9yRWFjaCIsImRpdiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0YXNrQ2FyZEFycmF5cyIsInNsaWNlIiwicmV2ZXJzZSIsImNvbXBhcmVCeURhdGUiLCJiIiwiRGF0ZSIsInRleHRDb250ZW50Iiwic29ydCIsImNvbXBhcmVCeVByb2plY3QiLCJzdHJpbmdBIiwic3RyaW5nQiIsImxvY2FsZUNvbXBhcmUiLCJhcmNoaXZlIiwiY2hlY2tib3hBcmNoaXZlIiwiYXJjaGl2ZWRUYXNrcyIsImNoZWNrZWQiLCJ0YXNrRWRpdCIsImNsb3NlTW9kaWZ5VGFzayIsImNsaWNrZWRDYXJkcyIsImNsaWNrZWRPYmpzIiwicHJvamVjdHNDb250YWluZXIiLCJjcmVhdGVJbmZvRGl2IiwiY3NzQ2xhc3MiLCJ0ZXh0IiwiY2xhc3NMaXN0IiwiYWRkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiY2xpY2tlZENhcmQiLCJmaW5kQ2FyZEluQXJyYXkiLCJhcnJheSIsImNhcmQiLCJjbGlja2VkQ2FyZEluZGV4IiwiaW5kZXhPZiIsImFyY2hpdmVkSW5kZXgiLCJkZWxldGVUYXNrIiwiY3JlYXRlTmFtZWREaXYiLCJuYW1lIiwiZGl2c09iamVjdHMiLCJjb3VudERheXMiLCJhY2Nlc3NUYXNrIiwidG9kYXkiLCJvYmpEYXRlIiwibmV3VGFza09iaiIsIk1hdGgiLCJjZWlsIiwidGFza0RpYWxvZyIsInByb2plY3REaWFsb2ciLCJ0YXNrVGl0bGUiLCJ0YXNrQnRuIiwic2hvd01vZGFsIiwiZm9jdXMiLCJwcm9qZWN0QnRuIiwicHJldmVudERlZmF1bHQiLCJ0YXNrRGVzY3JpcHRpb24iLCJ0YXNrRHVlRGF0ZSIsInNlbGVjdGVkUHJvamVjdCIsInNlbGVjdGVkSW5kZXgiLCJjaGVja1ZhbGlkaXR5IiwidGVzdCIsImFsZXJ0IiwiY2xvc2UiLCJwcm9qZWN0TmFtZSIsImFkZFRhc2siLCJ0YXNrQ2FyZCIsImJhY2tncm91bmRDb2xvciIsInRvcERldGFpbHNDYXJkIiwiZGF5Q291bnQiLCJib3R0b21DYXJkIiwiY2VudGVySW5mbyIsInJpZ2h0U2lkZSIsInRhc2tDaGVja2JveCIsInR5cGUiLCJjbGlja2VkQ2FyZFByb2plY3RUaXRsZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpbmNsdWRlcyIsImNvbnNvbGUiLCJsb2ciLCJ0YXNrRG9uZSIsIm9wZW5UYXNrIiwidGFza01vZGlmeSIsImVkaXRUYXNrVGl0bGUiLCJlZGl0VGFza0Rlc2NyaXB0aW9uIiwiZWRpdFRhc2tEdWVEYXRlIiwibW9kaWZ5Q2hlY2tib3giLCJjbGlja2VkT2JqIiwiY2xpY2tlZE9ialZhbHVlIiwiY2xpY2tlZENhcmRWYWx1ZSIsImVkaXRUYXNrIiwiYXBwZW5kIiwibG9hZFRhc2siLCJzdG9yZVRhc2siLCJwcm9qZWN0RGVzY3JpcHRpb24iLCJwcm9qZWN0RHVlRGF0ZSIsImFjY2Vzc1Byb2plY3QiLCJuZXdQcm9qZWN0T2JqIiwiYWRkUHJvamVjdCIsInByb2plY3RJdGVtIiwicHJvamVjdE9wdGlvbiIsIm1vZGlmeVByb2plY3RPcHRpb24iLCJsaW5rUHJvamVjdE5hbWUiLCJsb2FkUHJvamVjdCIsInN0b3JlUHJvamVjdCIsImJ0biJdLCJzb3VyY2VSb290IjoiIn0=