(()=>{"use strict";var e={341:(e,t,n)=>{n.d(t,{Z:()=>l});var o=n(537),c=n.n(o),r=n(645),a=n.n(r)()(c());a.push([e.id,"/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n\n#projectsContainer {\n    width: 100%;\n    \n}\n\n\n.topProjectItem {\n    display: flex;\n    justify-content: space-between;\n}\n.projectTools {\n    display: flex;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn, .projectRemoveBtn {\n    cursor: pointer;\n    \n}\n\n.openTask, .openProject {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}","",{version:3,sources:["webpack://./dist/style.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;IACI,UAAU;IACV,SAAS;;AAEb;AACA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;IACT,aAAa;IACb,yCAAyC;AAC7C;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;AACnB;;AAEA,UAAU;AACV;IACI,sBAAsB;IACtB,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,8BAA8B;AAClC;;;AAGA;IACI,WAAW;;AAEf;;;AAGA;IACI,aAAa;IACb,8BAA8B;AAClC;AACA;IACI,aAAa;AACjB;;AAEA,mBAAmB;AACnB;IACI,uBAAuB;IACvB,aAAa;IACb,eAAe;IACf,SAAS;IACT,YAAY;AAChB;;AAEA,YAAY;AACZ;IACI,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;AACjB;AACA;IACI,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,eAAe;;AAEnB;;AAEA;IACI,eAAe;;AAEnB;;AAEA,SAAS;AACT;IACI,gBAAgB;IAChB,wBAAwB;IACxB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["/* :root {\n    --\n}\n*/ \n\n* {\n    padding: 0;\n    margin: 0;\n    \n}\nbody {\n    background-color: grey;\n    padding: 0;\n    margin: 0;\n    display: grid;\n    grid-template: 20vh 70vh 10vh / 10vw 90vw;\n}\n\n/*Header*/\n#header {\n    grid-column: 2/3;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    border: 1px solid red;\n    padding-top: 50px;\n}\n\n#buttons {\n    align-self: flex-end;\n    padding-right: 30px;\n}\n\nbutton {\n    width: 200px;\n    height: 50px;\n    cursor: pointer;\n}\n\n/*Sidebar*/ \n#sidebar {\n    border: 1px solid blue;\n    grid-row: 1/3;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n\n#projectsContainer {\n    width: 100%;\n    \n}\n\n\n.topProjectItem {\n    display: flex;\n    justify-content: space-between;\n}\n.projectTools {\n    display: flex;\n}\n\n/*Tasks container */\n#tasks-container {\n    border: 1px solid green;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 20px;\n    margin: 30px;\n}\n\n/*task card*/\n.taskCard{\n    display: flex;\n    flex-direction: column;\n    background-color: blue;\n    padding: 20px;\n}\n.topDetailsCard {\n    display: flex;\n    gap: 10px;\n}\n\n.bottomCard {\n    display: flex;\n}\n\n.centerInfo {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.taskCheckbox {\n    width: 20px;\n    height: 20px;\n    background-color: #eee;\n    border: 1px solid #ccc;\n    cursor: pointer;\n}\n\n.taskRemoveBtn, .projectRemoveBtn {\n    cursor: pointer;\n    \n}\n\n.openTask, .openProject {\n    cursor: pointer;\n\n}\n\n/*Footer*/\n#footer {\n    grid-column: 1/3;\n    border: 1px solid purple;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}"],sourceRoot:""}]);const l=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,c,r){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var i=0;i<e.length;i++){var d=[].concat(e[i]);o&&a[d[0]]||(void 0!==r&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=r),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),c&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=c):d[4]="".concat(c)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),r="/*# ".concat(c," */");return[t].concat([r]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var r={},a=[],l=0;l<e.length;l++){var s=e[l],i=o.base?s[0]+o.base:s[0],d=r[i]||0,u="".concat(i," ").concat(d);r[i]=d+1;var p=n(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var m=c(A,o);o.byIndex=l,t.splice(l,0,{identifier:u,updater:m,references:1})}a.push(u)}return a}function c(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,c){var r=o(e=e||[],c=c||{});return function(e){e=e||[];for(var a=0;a<r.length;a++){var l=n(r[a]);t[l].references--}for(var s=o(e,c),i=0;i<r.length;i++){var d=n(r[i]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}r=s}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var c=void 0!==n.layer;c&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,c&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var c=t[o];if(void 0!==c)return c.exports;var r=t[o]={id:o,exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),c=n.n(o),r=n(569),a=n.n(r),l=n(565),s=n.n(l),i=n(216),d=n.n(i),u=n(589),p=n.n(u),A=n(341),m={};m.styleTagTransform=p(),m.setAttributes=s(),m.insert=a().bind(null,"head"),m.domAPI=c(),m.insertStyleElement=d(),t()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const f=[],C=[];class h{constructor(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.projectTitle=o}}class g extends h{constructor(e,t,n,o){super(e,t,n),this.color=o}}const y=document.getElementById("tasks-container"),v=document.getElementById("filter");function x(e){e.forEach((e=>{y.appendChild(e)}))}const B=function(){switch(y.querySelectorAll(".taskCard").forEach((e=>{y.removeChild(e)})),v.value){case"oldest":x(H);break;case"newest":x(H.slice().reverse());break;case"dueDate":function e(e,t){return new Date(e.querySelector(".taskDueDate").textContent)-new Date(t.querySelector(".taskDueDate").textContent)}x(H.slice().sort(e));break;case"project":function t(e,t){const n=e.querySelector(".projectName").textContent,o=t.querySelector(".projectName").textContent;return n.localeCompare(o)}x(H.slice().sort(t))}S()},k=document.getElementById("tasks-container"),b=document.getElementById("checkboxArchive"),I=document.getElementById("projectColor"),E=document.getElementById("projectsContainer"),j=document.getElementById("archivedProjectsContainer"),T=[],w=[],D=[];function S(){b.checked?T.forEach((e=>{k.appendChild(e)})):T.forEach((e=>{k.appendChild(e),k.removeChild(e)}))}const O=document.getElementById("projectList"),N=document.getElementById("projectColor"),L=document.getElementById("modifyProjectList"),q=(document.getElementById("projectsContainer"),document.getElementById("checkboxArchive"));let P=[],M=[];const R=document.getElementById("tasks-container");function U(e){const t=f.find((t=>t.title===e));return t?t.color:"blue"}function Y(e){const t=Array.from(N.getElementsByTagName("option")).find((t=>t.value===e));if(!N.contains(t))return!0}const V=document.getElementById("taskEdit"),Z=document.querySelector(".closeModifyTask"),$={},F={};const H=[],W=[],G=document.getElementById("projectsContainer");function J(e,t,n,o){let c=function(e,t,n,o){const c=new g(e,t,n,o);return f.push(c),{newProjectObj:c,projectArray:f}}(e,t,n,o);const r=X("projectItem");r.style.backgroundColor=o;const a=X("topProjectItem");a.appendChild(_("projectTitle",c.newProjectObj.title));const l=X("projectTools"),s=X("openProject","↗️");s.addEventListener("click",(e=>{editProject(c)}));const i=document.createElement("input");i.type="checkbox",i.classList.add("projectCheckbox"),i.value=null,i.addEventListener("click",(e=>{!function(e,t){const n=o(W)||o(w);function o(e){return e.find((e=>e.querySelector(".projectTitle").textContent===t.newProjectObj.title))}const c=n.getElementsByClassName("projectTitle")[0].textContent,r=Array.from(I.getElementsByTagName("option")),a=l(f)||l(D);function l(e){return e.find((e=>e.title===c))}if(console.log(f),console.log(a),e.target.checked){w.indexOf(n);const e=W.indexOf(n),o=f.indexOf(a);D.indexOf(a),w.includes(n)||w.push(n),console.log(w),D.includes(a)||D.push(a),console.log(D),-1!==e&&W.splice(e,1),console.log(W),-1!==o&&f.splice(o,1),console.log(f),E.removeChild(n),j.appendChild(n);const r=document.createElement("option");r.value=t.newProjectObj.color,r.style.backgroundColor=t.newProjectObj.color,I.appendChild(r),n.style.backgroundColor="grey",function(e){const t=H.filter((t=>t.querySelector(".projectName").textContent===e)),n=T.filter((t=>t.querySelector(".projectName").textContent===e));P=t.concat(n);for(const e of H){const n=t.indexOf(e);-1!==n&&H.splice(n,1)}for(const e of T){const t=n.indexOf(e);-1!==t&&T.splice(t,1)}M=C.filter((t=>t.projectTitle.includes(e)));for(const e of C){const t=M.indexOf(e);-1!==t&&C.splice(t,1)}t.forEach((e=>{R.removeChild(e)})),q.checked&&n.forEach((e=>{R.removeChild(e)}));const o=Array.from(O.getElementsByTagName("option")),c=Array.from(L.getElementsByTagName("option")),r=o.find((t=>t.value===e)),a=c.find((t=>t.value===e));O.removeChild(r),L.removeChild(a),console.log(t,n,P)}(c)}else{const o=w.indexOf(n),l=(W.indexOf(n),f.indexOf(a),D.indexOf(a));if(W.length>=10)return e.preventDefault(),n.querySelector(".projectCheckbox").checked=!0,void alert("Can't add archived project. Project limit reached");{-1!==o&&w.splice(o,1),console.log(w),-1!==l&&D.splice(l,1),console.log(D),W.includes(n)||W.push(n),console.log(W),f.includes(a)||f.push(a),console.log(f);const e=r[0].value;I.removeChild(r[0]),n.style.backgroundColor=e,t.newProjectObj.color=e,a.color=e,j.removeChild(n),E.appendChild(n),function(e,t){const n=P.filter((t=>t.querySelector(".projectName").textContent===e)),o=n.filter((e=>0==e.querySelector(".taskCheckbox").value)),c=n.filter((e=>"true"===e.querySelector(".taskCheckbox").value));n.forEach((e=>{console.log(e.querySelector(".taskCheckbox").value)})),console.log(n[0].querySelector(".taskCheckbox").value),console.log(n),console.log(o),console.log(c),o.forEach((e=>{H.includes(e)||H.push(e)})),c.forEach((e=>{T.includes(e)||T.push(e)})),M.filter((t=>t.projectTitle===e)).forEach((e=>{C.includes(e)||C.push(e)})),o.forEach((e=>{R.appendChild(e),e.style.backgroundColor=t})),c.forEach((e=>{q.checked&&(R.appendChild(e),e.style.backgroundColor="rgb(153, 105, 105)")}));const r=Array.from(O.getElementsByTagName("option")),a=Array.from(L.getElementsByTagName("option")),l=document.createElement("option");l.value=e,l.text=e;const s=document.createElement("option");s.value=e,s.text=e,a.includes(l)||L.appendChild(l),r.includes(s)||O.appendChild(s)}(c,e)}}}(e,c)})),l.appendChild(i),l.appendChild(_("projectRemoveBtn","🗑️")),l.appendChild(s),a.appendChild(l),r.appendChild(a),r.appendChild(_("projectDueDate",c.newProjectObj.dueDate)),function(e){const t=document.createElement("option"),n=document.createElement("option");n.value=e,n.text=e,L.appendChild(n),t.value=e,t.text=e,O.appendChild(t)}(e),W.push(r),G.appendChild(r)}function _(e,t){const n=document.createElement("div");return n.classList.add(e),n.textContent=t,"taskRemoveBtn"===e&&n.addEventListener("click",(e=>{!function(e){const t=n(H)||n(T);function n(t){return t.find((t=>t.querySelector(".taskRemoveBtn")===e.target))}const o=H.indexOf(t),c=T.indexOf(t);-1!==o&&H.splice(o,1),-1!==c&&T.splice(c,1),B()}(e)})),"projectRemoveBtn"===e&&n.addEventListener("click",(e=>{deleteProject(e)})),n}function X(e,t){const n={};return n[e]=document.createElement("div"),n[e].classList.add(e),n[e].textContent=t,n[e]}function z(e,t){const n=new Date,o=new Date(t.newTaskObj.dueDate);e.textContent=` Due in: ${Math.ceil((o-n)/864e5)} days`,e.style.color=o-n<0?"red":"black"}const K=document.getElementById("taskDialog"),Q=document.getElementById("projectDialog");document.getElementById("projectColor");const ee=document.getElementById("taskTitle"),te=document.getElementById("projectTitle"),ne=document.getElementById("taskBtn"),oe=document.getElementById("taskDialog");ne.addEventListener("click",(()=>{oe.showModal(),ee.focus()}));const ce=document.getElementById("projectBtn"),re=document.getElementById("projectDialog");ce.addEventListener("click",(()=>{re.showModal(),te.focus()})),document.getElementById("taskConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("taskTitle"),t=document.getElementById("taskDescription"),n=document.getElementById("taskDueDate"),o=document.getElementById("projectList"),c=o.options[o.selectedIndex];if(e.focus(),!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");let r=e.value,a=t.value,l=n.value,s=c.value;K.close(),function(e,t,n,o){let c=function(e,t,n,o){const c=new h(e,t,n,o);return C.push(c),{newTaskObj:c,taskArray:C}}(e,t,n,o);const r=X("taskCard");r.style.backgroundColor=U(o);const a=X("topDetailsCard");a.appendChild(_("projectName",c.newTaskObj.projectTitle));const l=document.createElement("div");l.classList.add("dayCount"),z(l,c),a.appendChild(l),r.appendChild(a);const s=X("bottomCard"),i=X("centerInfo");i.appendChild(_("taskTitle",c.newTaskObj.title)),i.appendChild(_("taskDueDate",c.newTaskObj.dueDate));const d=X("rightSide"),u=document.createElement("input");u.type="checkbox",u.classList.add("taskCheckbox"),u.value=null,u.addEventListener("click",(e=>{!function(e){const t=n(H)||n(T);function n(t){return t.find((t=>t.querySelector(".taskCheckbox")===e.target))}const o=T.indexOf(t),c=H.indexOf(t);console.log(t);const r=t.getElementsByClassName("projectName")[0].textContent;e.target.checked?(T.includes(t)||T.push(t),-1!==c&&H.splice(c,1),t.getElementsByClassName("taskCheckbox")[0].value=!0,t.style.backgroundColor="rgb(153, 105, 105)"):(H.includes(t)||H.push(t),-1!==o&&T.splice(o,1),t.style.backgroundColor=U(r),U(r)||(t.style.backgroundColor="blue"),t.getElementsByClassName("taskCheckbox")[0].value=null),B(),S()}(e)}));const p=document.createElement("div");p.textContent="↗️",p.classList.add("openTask"),p.addEventListener("click",(e=>{!function(e){V.showModal();const t=document.querySelector("#taskModify"),n=document.getElementById("editTaskTitle"),o=document.getElementById("editTaskDescription"),c=document.getElementById("editTaskDueDate"),r=document.getElementById("modifyProjectList"),a=document.getElementById("modifyCheckbox"),l=document.getElementById("modifyDelete");n.value=e.newTaskObj.title,o.value=e.newTaskObj.description,c.value=e.newTaskObj.dueDate,r.value=e.newTaskObj.projectTitle;const s="clickedObj1",i=C.find((e=>e.title===n.value&&e.description===o.value&&e.dueDate===c.value));F[s]=i;const d="clickedCard1",u=p(H)||p(T);function p(e){return e.find((e=>e.querySelector(".projectName").textContent===r.value&&e.querySelector(".taskTitle").textContent===n.value&&e.querySelector(".taskDueDate").textContent===c.value))}$[d]=u,$[d].getElementsByClassName("taskCheckbox")[0].value?a.checked=!0:a.checked=!1,Z.addEventListener("click",(()=>{V.close()})),l.addEventListener("click",(()=>{const e=H.indexOf($[d]),t=T.indexOf($[d]);V.close(),-1!==e&&H.splice(e,1),-1!==t&&T.splice(t,1),B()})),t.addEventListener("click",(()=>{F[s].title=n.value,F[s].description=o.value,F[s].dueDate=c.value,F[s].projectTitle=r.value,$[d].getElementsByClassName("projectName")[0].textContent=r.value,z($[d].getElementsByClassName("dayCount")[0],e),$[d].getElementsByClassName("taskTitle")[0].textContent=n.value,$[d].getElementsByClassName("taskDueDate")[0].textContent=c.value,$[d].getElementsByClassName("taskCheckbox")[0].checked=a.checked,$[d].style.backgroundColor=U(F[s].projectTitle),V.close();const t=H.indexOf($[d]),l=T.indexOf($[d]);a.checked?(T.includes($[d])||T.push($[d]),-1!==t&&H.splice(t,1),$[d].getElementsByClassName("taskCheckbox")[0].value=!0,$[d].style.backgroundColor="rgb(153, 105, 105)"):(H.includes($[d])||H.push($[d]),-1!==l&&T.splice(l,1),$[d].style.backgroundColor=U($[d].getElementsByClassName("projectName")[0].textContent),$[d].getElementsByClassName("taskCheckbox")[0].value=null),B(),S()}))}(c)})),d.appendChild(u),d.appendChild(_("taskRemoveBtn","🗑️")),d.appendChild(p),s.append(i),s.append(d),r.appendChild(s),H.push(r),B()}(r,a,l,s),e.value="",t.value="",n.value=""}()})),document.getElementById("projectConfirm").addEventListener("click",(e=>{e.preventDefault(),function(){const e=document.getElementById("projectTitle"),t=document.getElementById("projectDescription"),n=document.getElementById("projectDueDate"),o=document.getElementById("projectColor");if(!e.checkValidity()||!t.checkValidity()||!n.checkValidity()||/^\s*$/.test(e.value)||/^\s*$/.test(t.value))return void alert("Please fill the inputs. The title can't exceed 10 charachters. The description can't exceed 30 charachters");const c=f.find((t=>t.title===e.value));let r=e.value,a=t.value,l=n.value,s=o.value;if(c)return void alert("can't use same project name");if(Y(s))return void alert("Max amount of projects reached");Q.close();const i=Array.from(o.getElementsByTagName("option")).find((e=>e.value===s));o.removeChild(i),J(r,a,l,s),e.value="",t.value="",n.value=""}()})),document.querySelectorAll(".close-btn").forEach((e=>{e.addEventListener("click",(e=>{e.preventDefault(),oe.close(),re.close()}))})),document.getElementById("filter").addEventListener("change",(()=>{B()})),document.getElementById("checkboxArchive").addEventListener("click",(()=>{S()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,